// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`declared-arrow-fn.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const arrFn: (x: string) => (y: number) => (z: boolean) => [string, number, boolean]
  = (x) => y => z => [x, y, z]

=====================================output=====================================
const arrFn
  : (x: string) => (y: number) => (z: boolean) => [string, number, boolean]
  = x => y => z => [x, y, z];

================================================================================
`;

exports[`declared-arrow-fn.ts 2`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const arrFn: (x: string) => (y: number) => (z: boolean) => [string, number, boolean]
  = (x) => y => z => [x, y, z]

=====================================output=====================================
const arrFn
  : (x: string) => (y: number) => (z: boolean) => [string, number, boolean]
  = (x) => (y) => (z) => [x, y, z];

================================================================================
`;

exports[`long-type-defn.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const arrFn: (x: SuperLongTypeNameDefinedElseWhere) => (y: AnotherReallyLongTypeName) => (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue;

const arrFnWithImpl: (x: SuperLongTypeNameDefinedElseWhere) => (y: AnotherReallyLongTypeName) => (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = (argumentNumberOne) => (argumentNumberTwo) => (argumentNumberThree) =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(argumentNumberOne, argumentNumberTwo, argumentNumberThree);

const arrFnWithLongerImpl: (x: SuperLongTypeNameDefinedElseWhere) => (y: AnotherReallyLongTypeName) => (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = (argumentNumberOne) => (argumentNumberTwo) => (argumentNumberThreeIsLoooooooooooooooooooooooooooooong) =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(argumentNumberOne, argumentNumberTwo, argumentNumberThreeIsLoooooooooooooooooooooooooooooong);

=====================================output=====================================
const arrFn: (x: SuperLongTypeNameDefinedElseWhere) =>
  (y: AnotherReallyLongTypeName) =>
    (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue;

const arrFnWithImpl
  : (x: SuperLongTypeNameDefinedElseWhere) =>
      (y: AnotherReallyLongTypeName) =>
        (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = argumentNumberOne => argumentNumberTwo => argumentNumberThree =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(
      argumentNumberOne,
      argumentNumberTwo,
      argumentNumberThree
    );

const arrFnWithLongerImpl
  : (x: SuperLongTypeNameDefinedElseWhere) =>
      (y: AnotherReallyLongTypeName) =>
        (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = argumentNumberOne => argumentNumberTwo => argumentNumberThreeIsLoooooooooooooooooooooooooooooong =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(
      argumentNumberOne,
      argumentNumberTwo,
      argumentNumberThreeIsLoooooooooooooooooooooooooooooong
    );

================================================================================
`;

exports[`long-type-defn.ts 2`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const arrFn: (x: SuperLongTypeNameDefinedElseWhere) => (y: AnotherReallyLongTypeName) => (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue;

const arrFnWithImpl: (x: SuperLongTypeNameDefinedElseWhere) => (y: AnotherReallyLongTypeName) => (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = (argumentNumberOne) => (argumentNumberTwo) => (argumentNumberThree) =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(argumentNumberOne, argumentNumberTwo, argumentNumberThree);

const arrFnWithLongerImpl: (x: SuperLongTypeNameDefinedElseWhere) => (y: AnotherReallyLongTypeName) => (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = (argumentNumberOne) => (argumentNumberTwo) => (argumentNumberThreeIsLoooooooooooooooooooooooooooooong) =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(argumentNumberOne, argumentNumberTwo, argumentNumberThreeIsLoooooooooooooooooooooooooooooong);

=====================================output=====================================
const arrFn: (x: SuperLongTypeNameDefinedElseWhere) =>
  (y: AnotherReallyLongTypeName) =>
    (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue;

const arrFnWithImpl
  : (x: SuperLongTypeNameDefinedElseWhere) =>
      (y: AnotherReallyLongTypeName) =>
        (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = (argumentNumberOne) => (argumentNumberTwo) => (argumentNumberThree) =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(
      argumentNumberOne,
      argumentNumberTwo,
      argumentNumberThree
    );

const arrFnWithLongerImpl
  : (x: SuperLongTypeNameDefinedElseWhere) =>
      (y: AnotherReallyLongTypeName) =>
        (z: ThirdVeryLongAndBoringInterfaceName) => VeryLongReturnTypeValue
  = (argumentNumberOne) => (argumentNumberTwo) => (
    argumentNumberThreeIsLoooooooooooooooooooooooooooooong
  ) =>
    someVeryVeryVeryLoooooooooongFunctionInvocation(
      argumentNumberOne,
      argumentNumberTwo,
      argumentNumberThreeIsLoooooooooooooooooooooooooooooong
    );

================================================================================
`;

exports[`samples-from-issue-4166.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const myCurriedFn: (arg1: number) => (arg2: number) => (arg3: number) => number = arg1 => arg2 => arg3 => arg1 + arg2 + arg3;

const myCurriedFn2
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) =>
          LongReturnType
  = a => b => c => a + b + c;

const myCurriedFn3
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) =>
          LongReturnType
  = longFirstParameter => longSecondParameter => longThirdParameter =>
      longFirstParameter + longSecondParameter + longThirdParameter;

const myCurriedFn4
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) =>
          LongReturnType
  = (longFirstParameter: LongFirstType) =>
      (longSecondParameter: LongSecondType) =>
        (longThirdParameter: LongThirdType): LongReturnType =>
          longFirstParameter + longSecondParameter + longThirdParameter;

=====================================output=====================================
const myCurriedFn
  : (arg1: number) => (arg2: number) => (arg3: number) => number
  = arg1 => arg2 => arg3 => arg1 + arg2 + arg3;

const myCurriedFn2
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) => LongReturnType
  = a => b => c => a + b + c;

const myCurriedFn3
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) => LongReturnType
  = longFirstParameter => longSecondParameter => longThirdParameter =>
    longFirstParameter + longSecondParameter + longThirdParameter;

const myCurriedFn4
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) => LongReturnType
  = (longFirstParameter: LongFirstType) => (
    longSecondParameter: LongSecondType
  ) => (longThirdParameter: LongThirdType): LongReturnType =>
    longFirstParameter + longSecondParameter + longThirdParameter;

================================================================================
`;

exports[`samples-from-issue-4166.ts 2`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const myCurriedFn: (arg1: number) => (arg2: number) => (arg3: number) => number = arg1 => arg2 => arg3 => arg1 + arg2 + arg3;

const myCurriedFn2
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) =>
          LongReturnType
  = a => b => c => a + b + c;

const myCurriedFn3
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) =>
          LongReturnType
  = longFirstParameter => longSecondParameter => longThirdParameter =>
      longFirstParameter + longSecondParameter + longThirdParameter;

const myCurriedFn4
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) =>
          LongReturnType
  = (longFirstParameter: LongFirstType) =>
      (longSecondParameter: LongSecondType) =>
        (longThirdParameter: LongThirdType): LongReturnType =>
          longFirstParameter + longSecondParameter + longThirdParameter;

=====================================output=====================================
const myCurriedFn
  : (arg1: number) => (arg2: number) => (arg3: number) => number
  = (arg1) => (arg2) => (arg3) => arg1 + arg2 + arg3;

const myCurriedFn2
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) => LongReturnType
  = (a) => (b) => (c) => a + b + c;

const myCurriedFn3
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) => LongReturnType
  = (longFirstParameter) => (longSecondParameter) => (longThirdParameter) =>
    longFirstParameter + longSecondParameter + longThirdParameter;

const myCurriedFn4
  : (longNameFirstArgument: LongFirstType) =>
      (longNameSecondArgument: LongSecondType) =>
        (longNameThirdArgument: LongThirdType) => LongReturnType
  = (longFirstParameter: LongFirstType) => (
    longSecondParameter: LongSecondType
  ) => (longThirdParameter: LongThirdType): LongReturnType =>
    longFirstParameter + longSecondParameter + longThirdParameter;

================================================================================
`;
