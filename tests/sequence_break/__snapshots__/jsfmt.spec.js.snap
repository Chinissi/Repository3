// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`break.js 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const f = (argument1, argument2, argument3) =>
  (doSomethingWithArgument(argument1), doSomethingWithArgument(argument2),argument1);
(function(){
	return aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName;
});
aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName;
a.then(() => (aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName));
for (aLongIdentifierName = 0, aLongIdentifierName = 0, aLongIdentifierName = 0, aLongIdentifierName = 0; test; update) {}
(a = b ? c : function() { return 0; }),
  (a = b ? c : function() { return 0; }),
  (a = b ? c : function() { return 0; }),
  (a = b ? c : function() { return 0; }),
  (a = b ? c : function() { return 0; });
if (aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName) {}
while (aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName) {}
switch (aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName) {}
with (aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName) console.log(aLongIdentifierName);
(function(){
  throw aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName;
});
\`\${aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName}\`;
(function(){
  return aLongIdentifierName, aLongIdentifierName, aLongIdentifierName, aLongIdentifierName;
});

=====================================output=====================================
const f = (argument1, argument2, argument3) => (
  (doSomethingWithArgument(argument1),
  doSomethingWithArgument(argument2),
  argument1)
);
(function() {
  return (
    (aLongIdentifierName,
    aLongIdentifierName,
    aLongIdentifierName,
    aLongIdentifierName)
  );
});
(aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName);
a.then(
  () => (
    (aLongIdentifierName,
    aLongIdentifierName,
    aLongIdentifierName,
    aLongIdentifierName)
  )
);
for (
  (aLongIdentifierName = 0,
    aLongIdentifierName = 0,
    aLongIdentifierName = 0,
    aLongIdentifierName = 0);
  test;
  update
) {}
((a = b
  ? c
  : function() {
      return 0;
    }),
  (a = b
    ? c
    : function() {
        return 0;
      }),
  (a = b
    ? c
    : function() {
        return 0;
      }),
  (a = b
    ? c
    : function() {
        return 0;
      }),
  (a = b
    ? c
    : function() {
        return 0;
      }));
if (
  (aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName)
) {
}
while (
  (aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName)
) {}
switch (
  (aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName)
) {
}
with ((aLongIdentifierName,
aLongIdentifierName,
aLongIdentifierName,
aLongIdentifierName))
  console.log(aLongIdentifierName);
(function() {
  throw (aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName);
});
\`\${
  (aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName,
  aLongIdentifierName)
}\`;
(function() {
  return (
    (aLongIdentifierName,
    aLongIdentifierName,
    aLongIdentifierName,
    aLongIdentifierName)
  );
});

================================================================================
`;
