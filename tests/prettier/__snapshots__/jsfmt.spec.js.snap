exports[`test binary-expressions.js 1`] = `
"// It should always break the highest precedence operators first, and
// break them all at the same time.

const x = longVariable + longVariable + longVariable;
const x = longVariable + longVariable + longVariable + longVariable - longVariable + longVariable;
const x = longVariable + longVariable * longVariable + longVariable - longVariable + longVariable;
const x = longVariable + longVariable * longVariable * longVariable / longVariable + longVariable;

const x = longVariable && longVariable && longVariable && longVariable && longVariable && longVariable;
const x = longVariable && longVariable || longVariable && longVariable || longVariable && longVariable;

const x = longVariable * longint && longVariable >> 0 && longVariable + longVariable;

const x = longVariable > longint && longVariable === 0 + longVariable * longVariable;

foo(obj.property * new Class() && obj instanceof Class && longVariable ? number + 5 : false);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// It should always break the highest precedence operators first, and
// break them all at the same time.

const x = longVariable + longVariable + longVariable;
const x = longVariable +
  longVariable +
  longVariable +
  longVariable -
  longVariable +
  longVariable;
const x = longVariable +
  longVariable * longVariable +
  longVariable -
  longVariable +
  longVariable;
const x = longVariable +
  longVariable * longVariable * longVariable / longVariable +
  longVariable;

const x = longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable;
const x = longVariable && longVariable ||
  longVariable && longVariable ||
  longVariable && longVariable;

const x = longVariable * longint &&
  longVariable >> 0 &&
  longVariable + longVariable;

const x = longVariable > longint &&
  longVariable === 0 + longVariable * longVariable;

foo(
  obj.property * new Class() && obj instanceof Class && longVariable
    ? number + 5
    : false
);
"
`;

exports[`test directives.js 1`] = `
"\"use strict\";

function fn() {
  \"use strict\";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\"use strict\";

function fn() {
  \"use strict\";
}
"
`;

exports[`test exports.js 1`] = `
"export { value1, value2 as value2_renamed, value3, value4 as value4_renamed, value5 } from \"exports\";
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export {
  value1,
  value2 as value2_renamed,
  value3,
  value4 as value4_renamed,
  value5
} from \"exports\";
"
`;

exports[`test jsx-multiline-assign.js 1`] = `
"const comp1 = (
  <div style={styles} key=\"something\">
    Keep the wrapping parens.
  </div>
);

const comp2 = <div style={styles} key=\"something\">
  Create wrapping parens.
</div>;

comp2A = <div style={styles} key=\"something\">
  Create wrapping parens.
</div>;

const comp3 = <div style={styles} key=\"something\">Bump to next line without parens</div>;

const comp4 = <div style={styles} key=\"something\">Create wrapping parens and indent <strong>all the things</strong>.</div>;

const comp5 = <div>Keep it on one line.</div>;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const comp1 = (
  <div style={styles} key=\"something\">
    Keep the wrapping parens.
  </div>
);

const comp2 = (
  <div style={styles} key=\"something\">
    Create wrapping parens.
  </div>
);

comp2A = (
  <div style={styles} key=\"something\">
    Create wrapping parens.
  </div>
);

const comp3 = (
  <div style={styles} key=\"something\">Bump to next line without parens</div>
);

const comp4 = (
  <div style={styles} key=\"something\">
    Create wrapping parens and indent <strong>all the things</strong>.
  </div>
);

const comp5 = <div>Keep it on one line.</div>;
"
`;

exports[`test jsx-significant-space.js 1`] = `
"after =
  <span>
      foo <span>bar</span>
  </span>

before =
  <span>
    <span>bar</span> foo
  </span>

before_break1 =
  <span>
    <span barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar /> foo
  </span>

before_break2 =
  <span>
    <span barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar /> foo
  </span>

after_break =
  <span>
    foo <span barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar />
  </span>

within =
  <span>
    foo <span> bar </span>
  </span>

break_components =
  <div>
    <Foo />
    <Bar>
      <p>foo<span>bar bar bar</span></p><h1><span><em>yep</em></span></h1>
    </Bar>
    <h2>nope</h2>
  </div>

var x = <div>
    hello <strong>hi</strong> <foo>sdkflsdfjk</foo>
 </div>;

nest_plz =
  <div>
    <div>
    <div></div>
    </div>
  </div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
after = (
  <span>
    foo <span>bar</span>
  </span>
);

before = (
  <span>
    <span>bar</span> foo
  </span>
);

before_break1 = (
  <span>
    <span barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar />
    {\" \"}foo
  </span>
);

before_break2 = (
  <span>
    <span
      barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar
    />
    {\" \"}foo
  </span>
);

after_break = (
  <span>
    foo{\" \"}
    <span barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar />
  </span>
);

within = (
  <span>
    foo <span> bar </span>
  </span>
);

break_components = (
  <div>
    <Foo />
    <Bar>
      <p>foo<span>bar bar bar</span></p><h1><span><em>yep</em></span></h1>
    </Bar>
    <h2>nope</h2>
  </div>
);

var x = (
  <div>
    hello <strong>hi</strong> <foo>sdkflsdfjk</foo>
  </div>
);

nest_plz = (
  <div>
    <div>
      <div />
    </div>
  </div>
);
"
`;

exports[`test jsx-split-attrs.js 1`] = `
"long_closed =
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"/>

long_open =
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">
    hello
  </BaseForm>

long_open_long_children =
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">
    <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">
      Hello world
    </BaseForm>
    <div><div><div><div><div><div>hey hiya how are ya</div></div></div></div></div></div>
    <div><div><div><div attr=\"long\" attr2=\"also long\" attr3=\"gonna break\"></div></div></div></div>
    <div><div><div>
      <div attr=\"long\" attr2=\"also long\" attr3=\"gonna break\" attr4=\"hello please break me\" />
    </div></div></div>
    <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"><BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"></BaseForm>d</BaseForm>
    <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"><BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"></BaseForm></BaseForm>
  </BaseForm>

short_closed =
  <BaseForm url=\"/auth/google\" method=\"GET\"/>

short_open =
  <BaseForm url=\"/auth/google\" method=\"GET\">
    hello
  </BaseForm>

make_self_closing =
  <div>
    <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">
    </BaseForm>
    <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"></BaseForm>
  </div>

leave_opening =
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"> </BaseForm>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
long_closed = (
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  />
);

long_open = (
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  >
    hello
  </BaseForm>
);

long_open_long_children = (
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  >
    <BaseForm
      url=\"/auth/google\"
      method=\"GET\"
      colour=\"blue\"
      size=\"large\"
      submitLabel=\"Sign in with Google\"
    >
      Hello world
    </BaseForm>
    <div>
      <div><div><div><div><div>hey hiya how are ya</div></div></div></div></div>
    </div>
    <div>
      <div>
        <div><div attr=\"long\" attr2=\"also long\" attr3=\"gonna break\" /></div>
      </div>
    </div>
    <div>
      <div>
        <div>
          <div
            attr=\"long\"
            attr2=\"also long\"
            attr3=\"gonna break\"
            attr4=\"hello please break me\"
          />
        </div>
      </div>
    </div>
    <BaseForm
      url=\"/auth/google\"
      method=\"GET\"
      colour=\"blue\"
      size=\"large\"
      submitLabel=\"Sign in with Google\"
    >
      <BaseForm
        url=\"/auth/google\"
        method=\"GET\"
        colour=\"blue\"
        size=\"large\"
        submitLabel=\"Sign in with Google\"
      />
      d
    </BaseForm>
    <BaseForm
      url=\"/auth/google\"
      method=\"GET\"
      colour=\"blue\"
      size=\"large\"
      submitLabel=\"Sign in with Google\"
    >
      <BaseForm
        url=\"/auth/google\"
        method=\"GET\"
        colour=\"blue\"
        size=\"large\"
        submitLabel=\"Sign in with Google\"
      />
    </BaseForm>
  </BaseForm>
);

short_closed = <BaseForm url=\"/auth/google\" method=\"GET\" />;

short_open = (
  <BaseForm url=\"/auth/google\" method=\"GET\">
    hello
  </BaseForm>
);

make_self_closing = (
  <div>
    <BaseForm
      url=\"/auth/google\"
      method=\"GET\"
      colour=\"blue\"
      size=\"large\"
      submitLabel=\"Sign in with Google\"
    />
    <BaseForm
      url=\"/auth/google\"
      method=\"GET\"
      colour=\"blue\"
      size=\"large\"
      submitLabel=\"Sign in with Google\"
    />
  </div>
);

leave_opening = (
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  >
    {\" \"}
  </BaseForm>
);
"
`;

exports[`test jsx-stateless-arrow-fn.js 1`] = `
"const render1 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Keep the wrapping parens. Put each key on its own line.
  </div>
);

const render2 = ({ styles }) => <div style={styles} key=\"something\">
  Create wrapping parens.
</div>;

const render3 = ({ styles }) => <div style={styles} key=\"something\">Bump to next line without parens</div>;

const render4 = ({ styles }) => <div style={styles} key=\"something\">Create wrapping parens and indent <strong>all the things</strong>.</div>;

const render5 = ({ styles }) => <div>Keep it on one line.</div>;

const render6 = ({ styles }) => (
  <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\">
    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div>
    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div>
    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>
      <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div> <strong>hello</strong></div>
  </div>
)

const render7 = () =>
  <div>
    <span /><span>Dont break each elem onto its own line.</span> <span />
    <div /> <div />
  </div>

const render7A = () => (
  <div>
    <div /><div /><div />
  </div>
)

const render7B = () => (
  <div>
    <span> <span/> Dont break plz</span>
    <span><span/>Dont break plz</span>
    <span>Dont break plz<span/></span>
  </div>
)

const render8 = (props) => <div>{props.text}</div>
const render9 = (props) => <div>{props.looooooooooooooooooooooooooooooong_text}</div>
const render10 = (props) => <div>{props.even_looooooooooooooooooooooooooooooooooooooooooonger_contents}</div>

const notJSX = (aaaaaaaaaaaaaaaaa, bbbbbbbbbbb) => this.someLongCallWithParams(aaaaaa, bbbbbbb).anotherLongCallWithParams(cccccccccccc, dddddddddddddddddddddd)

React.render(
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\" />
  , document.querySelector(\'#react-root\')
)


const renderTernary = (props) =>
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">
    {props.showTheThing ?
      <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">Hello world</BaseForm>
      : \"hello \" + \"howdy! \"}
    {props.showTheThing ?
      <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">Hello world</BaseForm>
      :
      null
    }
    {props.showTheThing ? null :
      <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">Hello world</BaseForm>
    }
    {props.showTheOtherThing ? <div>I am here</div> : <div attr=\"blah\" />}
    {props.showTheOtherThing ? <div>I am here!!</div> : null}
  </BaseForm>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const render1 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Keep the wrapping parens. Put each key on its own line.
  </div>
);

const render2 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Create wrapping parens.
  </div>
);

const render3 = ({ styles }) => (
  <div style={styles} key=\"something\">Bump to next line without parens</div>
);

const render4 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Create wrapping parens and indent <strong>all the things</strong>.
  </div>
);

const render5 = ({ styles }) => <div>Keep it on one line.</div>;

const render6 = ({ styles }) => (
  <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\">
    <div
      attr1=\"aaaaaaaaaaaaaaaaa\"
      attr2=\"bbbbbbbbbbb\"
      attr3=\"cccccccccccc\"
      attr4
    >
      ddd d dd d d dddd dddd <strong>hello</strong>
    </div>
    <div
      attr1=\"aaaaaaaaaaaaaaaaa\"
      attr2=\"bbbbbbbbbbb\"
      attr3=\"cccccccccccc\"
      attr4
    >
      ddd d dd d d dddd dddd <strong>hello</strong>
    </div>
    <div
      attr1=\"aaaaaaaaaaaaaaaaa\"
      attr2=\"bbbbbbbbbbb\"
      attr3=\"cccccccccccc\"
      attr4
    >
      <div
        attr1=\"aaaaaaaaaaaaaaaaa\"
        attr2=\"bbbbbbbbbbb\"
        attr3=\"cccccccccccc\"
        attr4
      >
        ddd d dd d d dddd dddd <strong>hello</strong>
      </div>
      {\" \"}
      <strong>hello</strong>
    </div>
  </div>
);

const render7 = () => (
  <div>
    <span /><span>Dont break each elem onto its own line.</span> <span />
    <div /> <div />
  </div>
);

const render7A = () => (
  <div>
    <div /><div /><div />
  </div>
);

const render7B = () => (
  <div>
    <span> <span /> Dont break plz</span>
    <span><span />Dont break plz</span>
    <span>Dont break plz<span /></span>
  </div>
);

const render8 = props => <div>{props.text}</div>;
const render9 = props => (
  <div>{props.looooooooooooooooooooooooooooooong_text}</div>
);
const render10 = props => (
  <div>
    {props.even_looooooooooooooooooooooooooooooooooooooooooonger_contents}
  </div>
);

const notJSX = (aaaaaaaaaaaaaaaaa, bbbbbbbbbbb) =>
  this
    .someLongCallWithParams(aaaaaa, bbbbbbb)
    .anotherLongCallWithParams(cccccccccccc, dddddddddddddddddddddd);

React.render(
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  />,
  document.querySelector(\"#react-root\")
);

const renderTernary = props => (
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  >
    {
      props.showTheThing
        ? <BaseForm
          url=\"/auth/google\"
          method=\"GET\"
          colour=\"blue\"
          size=\"large\"
          submitLabel=\"Sign in with Google\"
        >
          Hello world
        </BaseForm>
        : \"hello \" + \"howdy! \"
    }
    {
      props.showTheThing
        ? <BaseForm
          url=\"/auth/google\"
          method=\"GET\"
          colour=\"blue\"
          size=\"large\"
          submitLabel=\"Sign in with Google\"
        >
          Hello world
        </BaseForm>
        : null
    }
    {
      props.showTheThing
        ? null
        : <BaseForm
          url=\"/auth/google\"
          method=\"GET\"
          colour=\"blue\"
          size=\"large\"
          submitLabel=\"Sign in with Google\"
        >
          Hello world
        </BaseForm>
    }
    {props.showTheOtherThing ? <div>I am here</div> : <div attr=\"blah\" />}
    {props.showTheOtherThing ? <div>I am here!!</div> : null}
  </BaseForm>
);
"
`;

exports[`test method-chain.js 1`] = `
"method().then(x => x)
  [\"abc\"](x => x)
  [abc](x => x);

({}.a().b());
({}).a().b();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method()
  .then(x => x)
  [\"abc\"](x => x)
  [abc](x => x);

({}).a().b();
({}).a().b();
"
`;

exports[`test object-prop-break-in.js 1`] = `
"const a = classnames({
  \"some-prop\": this.state.longLongLongLongLongLongLongLongLongTooLongProp
});

const b = classnames({
  \"some-prop\": this.state.longLongLongLongLongLongLongLongLongTooLongProp === true
});

const c = classnames({
  \"some-prop\": [ \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\" ]
});

const d = classnames({
  \"some-prop\": () => {}
});

const e = classnames({
  \"some-prop\": function bar() {}
});

const f = classnames({
  \"some-prop\": { foo: \"bar\", bar: \"foo\", foo: \"bar\", bar: \"foo\", foo: \"bar\" }
});

const g = classnames({
  \"some-prop\": longLongLongLongLongLongLongLongLongLongLongLongLongTooLongVar || 1337
});
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const a = classnames({
  \"some-prop\": this.state.longLongLongLongLongLongLongLongLongTooLongProp
});

const b = classnames({
  \"some-prop\": (
    this.state.longLongLongLongLongLongLongLongLongTooLongProp === true
  )
});

const c = classnames({
  \"some-prop\": [ \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\" ]
});

const d = classnames({
  \"some-prop\": () => {
  }
});

const e = classnames({
  \"some-prop\": function bar() {
  }
});

const f = classnames({
  \"some-prop\": { foo: \"bar\", bar: \"foo\", foo: \"bar\", bar: \"foo\", foo: \"bar\" }
});

const g = classnames({
  \"some-prop\": (
    longLongLongLongLongLongLongLongLongLongLongLongLongTooLongVar || 1337
  )
});
"
`;

exports[`test optional-type-name.js 1`] = `
"type Foo = (any) => string

type Bar = { [string]: number }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
type Foo = (any) => string;

type Bar = { [string]: number };
"
`;
