// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`non-strict-equal.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

'use strict';

type Enum1 = 'A' | 'B' | 'C';

type Enum2 = 'D' | 'E' | 'F';

type Union =
  | Enum1
  | Enum2;

class C {
  static FOO: Union = 'A';
}

declare var x: Union;

const _ = x == C.FOO;

=====================================output=====================================
// @flow

"use strict";

type Enum1 = "A" | "B" | "C";

type Enum2 = "D" | "E" | "F";

type Union = Enum1 | Enum2;

class C {
  static FOO: Union = "A";
}

declare var x: Union;

const _ = x == C.FOO;

================================================================================
`;

exports[`strict-equal.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

'use strict';

type Enum1 = 'A' | 'B' | 'C';

type Enum2 = 'D' | 'E' | 'F';

type Union =
  | Enum1
  | Enum2;

class C {
  static FOO: Union = 'A';
}

declare var x: Union;

const _ = x === C.FOO;

=====================================output=====================================
// @flow

"use strict";

type Enum1 = "A" | "B" | "C";

type Enum2 = "D" | "E" | "F";

type Union = Enum1 | Enum2;

class C {
  static FOO: Union = "A";
}

declare var x: Union;

const _ = x === C.FOO;

================================================================================
`;
