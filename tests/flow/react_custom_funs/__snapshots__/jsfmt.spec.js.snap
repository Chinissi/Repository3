// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`clone_element.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import React from 'react';
import type {Element} from 'react';

declare var any: any;

class A extends React.Component<{foo: number}, void> {}
class B extends React.Component<{foo: number, bar: number}, void> {}
class C extends React.Component<{children: number}, void> {}
class D extends React.Component<{children: Array<number>}, void> {}
class E extends React.Component<{foo: number, bar: number}, void> {
  static defaultProps = {bar: 42};
}

declare var a: Element<Class<A>>;
declare var b: Element<Class<B>>;
declare var c: Element<Class<C>>;
declare var d: Element<Class<D>>;
declare var e: Element<Class<E>>;

React.cloneElement(); // Error: Needs a minimum of two arguments.
React.cloneElement('nope'); // Error: Not a valid element type.
React.cloneElement({ type: any }); // Error: Not a valid element type.
React.cloneElement(a); // OK: \`a\` is an element.

(React.cloneElement(a).type: Class<A>); // OK: \`a\` has a type of \`A\`.
(React.cloneElement(a).type: Class<B>); // Error: \`a\` has a type of \`A\`.
(React.cloneElement(a).props.foo: number); // OK
(React.cloneElement(a).props.bar: empty); // Error: \`bar\` does not exist.
(React.cloneElement(a).props.foo: string); // Error: \`foo\` is number.
(React.cloneElement(b).props.foo: number); // OK
(React.cloneElement(b).props.bar: number); // OK
(React.cloneElement(b).props.foo: string); // Error: \`foo\` is number.

React.cloneElement(a, {}); // OK
React.cloneElement(a, undefined); // OK
React.cloneElement(a, null); // OK
React.cloneElement(a, {foo: 1}); // OK
React.cloneElement(a, {foo: 1, bar: 2}); // OK
React.cloneElement(a, {foo: '1'}); // Error: \`foo\` is a number.
React.cloneElement(b, {}); // OK
React.cloneElement(b, undefined); // OK
React.cloneElement(b, null); // OK
React.cloneElement(b, {foo: 1}); // OK
React.cloneElement(b, {foo: 1, bar: 2}); // OK
React.cloneElement(b, {foo: '1'}); // Error: \`foo\` is a number.

React.cloneElement(c, {}); // OK
React.cloneElement(c, undefined); // OK
React.cloneElement(c, null); // OK
React.cloneElement(c, {children: 42}); // OK
React.cloneElement(c, {children: '42'}); // Error: \`children\` is a number.
React.cloneElement(c, {}, 42); // OK
React.cloneElement(c, undefined, 42); // OK
React.cloneElement(c, null, 42); // OK
React.cloneElement(c, {}, 1, 2, 3); // Error: \`children\` is not an array.
React.cloneElement(c, undefined, 1, 2, 3); // Error: \`children\` is not an array.
React.cloneElement(c, null, 1, 2, 3); // Error: \`children\` is not an array.
React.cloneElement(c, {}, ...[]); // OK

React.cloneElement(d, {}); // OK
React.cloneElement(d, {children: 42}); // Error: \`children\` is an array.
React.cloneElement(d, {children: [1, 2, 3]}); // OK
React.cloneElement(d, {}, 42); // Error: \`children\` is an array.
React.cloneElement(d, undefined, 42); // Error: \`children\` is an array.
React.cloneElement(d, null, 42); // Error: \`children\` is an array.
React.cloneElement(d, {}, 1, 2, 3); // OK
React.cloneElement(d, undefined, 1, 2, 3); // OK
React.cloneElement(d, null, 1, 2, 3); // OK

React.cloneElement(e, {}); // OK
React.cloneElement(e, {foo: 1}); // OK
React.cloneElement(e, {foo: 1, bar: 2}); // OK
React.cloneElement(e, {foo: undefined, bar: 2}); // Error: undefined ~> number
React.cloneElement(e, {foo: 1, bar: undefined}); // OK: \`bar\` has a default.

function SFC(props: { p: number }) { return null };
React.cloneElement(<SFC p={0} />, { p: "bad" }); // Error: string ~> number

=====================================output=====================================
// @flow

import React from "react";
import type { Element } from "react";

declare var any: any;

class A extends React.Component<{ foo: number }, void> {}
class B extends React.Component<{ foo: number, bar: number }, void> {}
class C extends React.Component<{ children: number }, void> {}
class D extends React.Component<{ children: Array<number> }, void> {}
class E extends React.Component<{ foo: number, bar: number }, void> {
  static defaultProps = { bar: 42 };
}

declare var a: Element<Class<A>>;
declare var b: Element<Class<B>>;
declare var c: Element<Class<C>>;
declare var d: Element<Class<D>>;
declare var e: Element<Class<E>>;

React.cloneElement(); // Error: Needs a minimum of two arguments.
React.cloneElement("nope"); // Error: Not a valid element type.
React.cloneElement({ type: any }); // Error: Not a valid element type.
React.cloneElement(a); // OK: \`a\` is an element.

(React.cloneElement(a).type: Class<A>); // OK: \`a\` has a type of \`A\`.
(React.cloneElement(a).type: Class<B>); // Error: \`a\` has a type of \`A\`.
(React.cloneElement(a).props.foo: number); // OK
(React.cloneElement(a).props.bar: empty); // Error: \`bar\` does not exist.
(React.cloneElement(a).props.foo: string); // Error: \`foo\` is number.
(React.cloneElement(b).props.foo: number); // OK
(React.cloneElement(b).props.bar: number); // OK
(React.cloneElement(b).props.foo: string); // Error: \`foo\` is number.

React.cloneElement(a, {}); // OK
React.cloneElement(a, undefined); // OK
React.cloneElement(a, null); // OK
React.cloneElement(a, { foo: 1 }); // OK
React.cloneElement(a, { foo: 1, bar: 2 }); // OK
React.cloneElement(a, { foo: "1" }); // Error: \`foo\` is a number.
React.cloneElement(b, {}); // OK
React.cloneElement(b, undefined); // OK
React.cloneElement(b, null); // OK
React.cloneElement(b, { foo: 1 }); // OK
React.cloneElement(b, { foo: 1, bar: 2 }); // OK
React.cloneElement(b, { foo: "1" }); // Error: \`foo\` is a number.

React.cloneElement(c, {}); // OK
React.cloneElement(c, undefined); // OK
React.cloneElement(c, null); // OK
React.cloneElement(c, { children: 42 }); // OK
React.cloneElement(c, { children: "42" }); // Error: \`children\` is a number.
React.cloneElement(c, {}, 42); // OK
React.cloneElement(c, undefined, 42); // OK
React.cloneElement(c, null, 42); // OK
React.cloneElement(c, {}, 1, 2, 3); // Error: \`children\` is not an array.
React.cloneElement(c, undefined, 1, 2, 3); // Error: \`children\` is not an array.
React.cloneElement(c, null, 1, 2, 3); // Error: \`children\` is not an array.
React.cloneElement(c, {}, ...[]); // OK

React.cloneElement(d, {}); // OK
React.cloneElement(d, { children: 42 }); // Error: \`children\` is an array.
React.cloneElement(d, { children: [1, 2, 3] }); // OK
React.cloneElement(d, {}, 42); // Error: \`children\` is an array.
React.cloneElement(d, undefined, 42); // Error: \`children\` is an array.
React.cloneElement(d, null, 42); // Error: \`children\` is an array.
React.cloneElement(d, {}, 1, 2, 3); // OK
React.cloneElement(d, undefined, 1, 2, 3); // OK
React.cloneElement(d, null, 1, 2, 3); // OK

React.cloneElement(e, {}); // OK
React.cloneElement(e, { foo: 1 }); // OK
React.cloneElement(e, { foo: 1, bar: 2 }); // OK
React.cloneElement(e, { foo: undefined, bar: 2 }); // Error: undefined ~> number
React.cloneElement(e, { foo: 1, bar: undefined }); // OK: \`bar\` has a default.

function SFC(props: { p: number }) {
  return null;
}
React.cloneElement(<SFC p={0} />, { p: "bad" }); // Error: string ~> number

================================================================================
`;

exports[`create_element.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import React from 'react';

declare var any: any;

React.createElement(); // Error: Needs a minimum of two arguments.
React.createElement('div'); // OK
React.createElement(42); // Error: Number is not a valid component type.
React.createElement('div', {}); // OK
React.createElement(42, {}); // Error: Number is not a valid component type.
React.createElement({}, {}); // Error: Object is not a valid component type.
React.createElement(() => { return null }, {}); // OK

class A extends React.Component<{foo: number, bar: number}> {}
function B(props: {foo: number, bar: number}) { return null }

React.createElement(A, {foo: 1, bar: 2}); // OK
React.createElement(B, {foo: 1, bar: 2}); // OK
React.createElement(A, {
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
React.createElement(B, {
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
React.createElement(A, {foo: 42}); // Error: \`bar\` is missing.
React.createElement(B, {foo: 42}); // Error: \`bar\` is missing.
React.createElement(A, undefined); // Error: \`foo\` and \`bar\` are missing.
React.createElement(B, undefined); // Error: \`foo\` and \`bar\` are missing.
React.createElement(A, null); // Error: \`foo\` and \`bar\` are missing.
React.createElement(B, null); // Error: \`foo\` and \`bar\` are missing.
(React.createElement(A, {foo: 1, bar: 2}).type: Class<A>); // OK
(React.createElement(B, {foo: 1, bar: 2}).type: typeof B); // OK
(React.createElement(A, {foo: 1, bar: 2}).props.foo: number); // OK
(React.createElement(B, {foo: 1, bar: 2}).props.foo: number); // OK
(React.createElement(A, {foo: 1, bar: 2}).props.foo: boolean); // Error: \`foo\`
                                                               // is \`number\`.
(React.createElement(B, {foo: 1, bar: 2}).props.foo: boolean); // Error: \`foo\`
                                                               // is \`number\`.
React.createElement(A, {foo: 1, bar: 2}).nope; // Error: \`nope\` does not exist.
React.createElement(B, {foo: 1, bar: 2}).nope; // Error: \`nope\` does not exist.
React.createElement(A); // Error: Missing \`foo\` and \`bar\`.
React.createElement(B); // Error: Missing \`foo\` and \`bar\`.

class C extends React.Component<{foo: number, bar: number}> {
  static defaultProps = {bar: 42};
}
function D(props: {foo: number, bar: number}) { return null }
D.defaultProps = {bar: 42};

React.createElement(C, {foo: 1, bar: 2}); // OK
React.createElement(D, {foo: 1, bar: 2}); // OK
React.createElement(C, {
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
React.createElement(D, {
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
React.createElement(C, {foo: 42}); // OK: \`bar\` is in \`defaultProps\`.
React.createElement(D, {foo: 42}); // OK: \`bar\` is in \`defaultProps\`.
(React.createElement(C, {foo: 42}).props.bar: number); // OK
(React.createElement(D, {foo: 42}).props.bar: number); // OK

React.createElement(any, {whateverYouWant: 'yes'}); // OK

class E extends React.Component<{children: number}> {}
React.createElement(E, {}); // Error
React.createElement(E, undefined); // Error
React.createElement(E, null); // Error
React.createElement(E, {}, 1); // OK
React.createElement(E, undefined, 1); // OK
React.createElement(E, null, 1); // OK
React.createElement(E, {}, 1, 2); // Error
React.createElement(E, undefined, 1, 2); // Error
React.createElement(E, null, 1, 2); // Error
React.createElement(E, {}, 1, 2, 3); // Error
React.createElement(E, {}, [1, 2]); // Error
React.createElement(E, {}, [1, 2], [3, 4]); // Error
React.createElement(E, {}, ...[]); // Error
React.createElement(E, {}, ...[1]); // OK
React.createElement(E, {}, ...[1, 2]); // Error
React.createElement(E, {}, ...(any: Array<number>)); // Error
React.createElement(E, {}, 1, ...[]); // OK
React.createElement(E, {}, 1, ...[2]); // Error
React.createElement(E, {}, 1, ...(any: Array<number>)); // Error

class F extends React.Component<{children: Array<number>}> {}
React.createElement(F, {}); // Error
React.createElement(F, undefined); // Error
React.createElement(F, null); // Error
React.createElement(F, {}, 1); // Error
React.createElement(F, undefined, 1); // Error
React.createElement(F, null, 1); // Error
React.createElement(F, {}, 1, 2); // OK
React.createElement(F, undefined, 1, 2); // OK
React.createElement(F, null, 1, 2); // OK
React.createElement(F, {}, 1, 2, 3); // OK
React.createElement(F, {}, [1, 2]); // OK
React.createElement(F, {}, [1, 2], [3, 4]); // Error
React.createElement(F, {}, ...[]); // Error
React.createElement(F, {}, ...[1]); // Error
React.createElement(F, {}, ...[1, 2]); // OK
React.createElement(F, {}, ...(any: Array<number>)); // Error
React.createElement(F, {}, 1, ...[]); // Error
React.createElement(F, {}, 1, ...[2]); // OK
React.createElement(F, {}, 1, ...(any: Array<number>)); // Error

class G extends React.Component<{children: number | Array<number>}> {}
React.createElement(G, {}); // Error
React.createElement(G, {}, 1); // OK
React.createElement(G, {}, 1, 2); // OK
React.createElement(G, {}, 1, 2, 3); // OK
React.createElement(G, {}, [1, 2]); // OK
React.createElement(G, {}, [1, 2], [3, 4]); // Error
React.createElement(G, {}, ...[]); // Error
React.createElement(G, {}, ...[1]); // OK
React.createElement(G, {}, ...[1, 2]); // OK
React.createElement(G, {}, ...(any: Array<number>)); // Error
React.createElement(G, {}, 1, ...[]); // OK
React.createElement(G, {}, 1, ...[2]); // OK
React.createElement(G, {}, 1, ...(any: Array<number>)); // OK

class G2 extends React.Component<{children?: number | Array<number>}> {}
React.createElement(G2, {}); // OK
React.createElement(G2, {}, 1); // OK
React.createElement(G2, {}, 1, 2); // OK
React.createElement(G2, {}, 1, 2, 3); // OK
React.createElement(G2, {}, [1, 2]); // OK
React.createElement(G2, {}, [1, 2], [3, 4]); // Error
React.createElement(G2, {}, ...[]); // OK
React.createElement(G2, {}, ...[1]); // OK
React.createElement(G2, {}, ...[1, 2]); // OK
React.createElement(G2, {}, ...(any: Array<number>)); // OK
React.createElement(G2, {}, 1, ...[]); // OK
React.createElement(G2, {}, 1, ...[2]); // OK
React.createElement(G2, {}, 1, ...(any: Array<number>)); // OK

type NumberArrayRecursive = number | Array<NumberArrayRecursive>;
class H extends React.Component<{children: NumberArrayRecursive}> {}
React.createElement(H, {}); // Error
React.createElement(H, {}, 1); // OK
React.createElement(H, {}, 1, 2); // OK
React.createElement(H, {}, 1, 2, 3); // OK
React.createElement(H, {}, [1, 2]); // OK
React.createElement(H, {}, [1, 2], [3, 4]); // OK
React.createElement(H, {}, ...[]); // Error
React.createElement(H, {}, ...[1]); // OK
React.createElement(H, {}, ...[1, 2]); // OK
React.createElement(H, {}, ...(any: Array<number>)); // Error
React.createElement(H, {}, 1, ...[]); // OK
React.createElement(H, {}, 1, ...[2]); // OK
React.createElement(H, {}, 1, ...(any: Array<number>)); // OK

class I extends React.Component<{children?: number}> {}
React.createElement(I, {}); // OK
React.createElement(I, {}, undefined); // OK
React.createElement(I, {}, null); // Error
React.createElement(I, {}, 1); // OK
React.createElement(I, {}, 1, 2); // Error
React.createElement(I, {}, ...[]); // OK
React.createElement(I, {}, ...[1]); // OK
React.createElement(I, {}, ...[1, 2]); // Error
React.createElement(I, {}, ...(any: Array<number>)); // Error
React.createElement(I, {}, 1, ...[]); // OK
React.createElement(I, {}, 1, ...[2]); // Error
React.createElement(I, {}, 1, ...(any: Array<number>)); // Error

class J extends React.Component<{children: ?number}> {}
React.createElement(J, {}); // Error
React.createElement(J, {}, undefined); // OK
React.createElement(J, {}, null); // OK
React.createElement(J, {}, 1); // OK
React.createElement(J, {}, 1, 2); // Error
React.createElement(J, {}, ...[]); // Error
React.createElement(J, {}, ...[1]); // OK
React.createElement(J, {}, ...[1, 2]); // Error
React.createElement(J, {}, ...(any: Array<number>)); // Error
React.createElement(J, {}, 1, ...[]); // OK
React.createElement(J, {}, 1, ...[2]); // Error
React.createElement(J, {}, 1, ...(any: Array<number>)); // Error

class K extends React.Component<{children: number}> {}
React.createElement(K, {}, 42); // OK
React.createElement(K, {children: 42}); // OK
React.createElement(K, {children: 42}, 42); // OK
React.createElement(K, {}, '42'); // Error
React.createElement(K, {children: '42'}); // Error
React.createElement(K, {children: '42'}, 42); // Error
React.createElement(K, {children: 42}, '42'); // Error
React.createElement(K, {children: '42'}, '42'); // Error

class L extends React.Component<{
  foo: number,
  bar: number,
  children: number,
}> {
  static defaultProps = {bar: 42};
}
React.createElement(L, {foo: 1, bar: 2}, 3); // OK
React.createElement(L, {foo: 1, bar: 2, children: 3}); // OK
React.createElement(L, {foo: 1}, 2); // OK
React.createElement(L, {foo: 1, children: 2}); // OK
React.createElement(L, {}, 1); // Error
React.createElement(L, {children: 1}); // Error
React.createElement(L, {bar: 1}, 2); // Error
React.createElement(L, {bar: 1, children: 2}); // Error
React.createElement(L, {foo: '1', bar: 2}, 3); // Error
React.createElement(L, {foo: '1', bar: 2, children: 3}); // Error
React.createElement(L, {foo: 1, bar: '2'}, 3); // Error
React.createElement(L, {foo: 1, bar: '2', children: 3}); // Error
React.createElement(L, {foo: 1, bar: 2}, '3'); // Error
React.createElement(L, {foo: 1, bar: 2, children: '3'}); // Error

class M extends React.Component<{}> {}
class N extends React.Component<{}> {}
(React.createElement(M).type: typeof M); // OK
(React.createElement(M).type: typeof N); // Error

=====================================output=====================================
// @flow

import React from "react";

declare var any: any;

React.createElement(); // Error: Needs a minimum of two arguments.
React.createElement("div"); // OK
React.createElement(42); // Error: Number is not a valid component type.
React.createElement("div", {}); // OK
React.createElement(42, {}); // Error: Number is not a valid component type.
React.createElement({}, {}); // Error: Object is not a valid component type.
React.createElement(() => {
  return null;
}, {}); // OK

class A extends React.Component<{ foo: number, bar: number }> {}
function B(props: { foo: number, bar: number }) {
  return null;
}

React.createElement(A, { foo: 1, bar: 2 }); // OK
React.createElement(B, { foo: 1, bar: 2 }); // OK
React.createElement(A, {
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
React.createElement(B, {
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
React.createElement(A, { foo: 42 }); // Error: \`bar\` is missing.
React.createElement(B, { foo: 42 }); // Error: \`bar\` is missing.
React.createElement(A, undefined); // Error: \`foo\` and \`bar\` are missing.
React.createElement(B, undefined); // Error: \`foo\` and \`bar\` are missing.
React.createElement(A, null); // Error: \`foo\` and \`bar\` are missing.
React.createElement(B, null); // Error: \`foo\` and \`bar\` are missing.
(React.createElement(A, { foo: 1, bar: 2 }).type: Class<A>); // OK
(React.createElement(B, { foo: 1, bar: 2 }).type: typeof B); // OK
(React.createElement(A, { foo: 1, bar: 2 }).props.foo: number); // OK
(React.createElement(B, { foo: 1, bar: 2 }).props.foo: number); // OK
(React.createElement(A, { foo: 1, bar: 2 }).props.foo: boolean); // Error: \`foo\`
// is \`number\`.
(React.createElement(B, { foo: 1, bar: 2 }).props.foo: boolean); // Error: \`foo\`
// is \`number\`.
React.createElement(A, { foo: 1, bar: 2 }).nope; // Error: \`nope\` does not exist.
React.createElement(B, { foo: 1, bar: 2 }).nope; // Error: \`nope\` does not exist.
React.createElement(A); // Error: Missing \`foo\` and \`bar\`.
React.createElement(B); // Error: Missing \`foo\` and \`bar\`.

class C extends React.Component<{ foo: number, bar: number }> {
  static defaultProps = { bar: 42 };
}
function D(props: { foo: number, bar: number }) {
  return null;
}
D.defaultProps = { bar: 42 };

React.createElement(C, { foo: 1, bar: 2 }); // OK
React.createElement(D, { foo: 1, bar: 2 }); // OK
React.createElement(C, {
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
React.createElement(D, {
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
React.createElement(C, { foo: 42 }); // OK: \`bar\` is in \`defaultProps\`.
React.createElement(D, { foo: 42 }); // OK: \`bar\` is in \`defaultProps\`.
(React.createElement(C, { foo: 42 }).props.bar: number); // OK
(React.createElement(D, { foo: 42 }).props.bar: number); // OK

React.createElement(any, { whateverYouWant: "yes" }); // OK

class E extends React.Component<{ children: number }> {}
React.createElement(E, {}); // Error
React.createElement(E, undefined); // Error
React.createElement(E, null); // Error
React.createElement(E, {}, 1); // OK
React.createElement(E, undefined, 1); // OK
React.createElement(E, null, 1); // OK
React.createElement(E, {}, 1, 2); // Error
React.createElement(E, undefined, 1, 2); // Error
React.createElement(E, null, 1, 2); // Error
React.createElement(E, {}, 1, 2, 3); // Error
React.createElement(E, {}, [1, 2]); // Error
React.createElement(E, {}, [1, 2], [3, 4]); // Error
React.createElement(E, {}, ...[]); // Error
React.createElement(E, {}, ...[1]); // OK
React.createElement(E, {}, ...[1, 2]); // Error
React.createElement(E, {}, ...(any: Array<number>)); // Error
React.createElement(E, {}, 1, ...[]); // OK
React.createElement(E, {}, 1, ...[2]); // Error
React.createElement(E, {}, 1, ...(any: Array<number>)); // Error

class F extends React.Component<{ children: Array<number> }> {}
React.createElement(F, {}); // Error
React.createElement(F, undefined); // Error
React.createElement(F, null); // Error
React.createElement(F, {}, 1); // Error
React.createElement(F, undefined, 1); // Error
React.createElement(F, null, 1); // Error
React.createElement(F, {}, 1, 2); // OK
React.createElement(F, undefined, 1, 2); // OK
React.createElement(F, null, 1, 2); // OK
React.createElement(F, {}, 1, 2, 3); // OK
React.createElement(F, {}, [1, 2]); // OK
React.createElement(F, {}, [1, 2], [3, 4]); // Error
React.createElement(F, {}, ...[]); // Error
React.createElement(F, {}, ...[1]); // Error
React.createElement(F, {}, ...[1, 2]); // OK
React.createElement(F, {}, ...(any: Array<number>)); // Error
React.createElement(F, {}, 1, ...[]); // Error
React.createElement(F, {}, 1, ...[2]); // OK
React.createElement(F, {}, 1, ...(any: Array<number>)); // Error

class G extends React.Component<{ children: number | Array<number> }> {}
React.createElement(G, {}); // Error
React.createElement(G, {}, 1); // OK
React.createElement(G, {}, 1, 2); // OK
React.createElement(G, {}, 1, 2, 3); // OK
React.createElement(G, {}, [1, 2]); // OK
React.createElement(G, {}, [1, 2], [3, 4]); // Error
React.createElement(G, {}, ...[]); // Error
React.createElement(G, {}, ...[1]); // OK
React.createElement(G, {}, ...[1, 2]); // OK
React.createElement(G, {}, ...(any: Array<number>)); // Error
React.createElement(G, {}, 1, ...[]); // OK
React.createElement(G, {}, 1, ...[2]); // OK
React.createElement(G, {}, 1, ...(any: Array<number>)); // OK

class G2 extends React.Component<{ children?: number | Array<number> }> {}
React.createElement(G2, {}); // OK
React.createElement(G2, {}, 1); // OK
React.createElement(G2, {}, 1, 2); // OK
React.createElement(G2, {}, 1, 2, 3); // OK
React.createElement(G2, {}, [1, 2]); // OK
React.createElement(G2, {}, [1, 2], [3, 4]); // Error
React.createElement(G2, {}, ...[]); // OK
React.createElement(G2, {}, ...[1]); // OK
React.createElement(G2, {}, ...[1, 2]); // OK
React.createElement(G2, {}, ...(any: Array<number>)); // OK
React.createElement(G2, {}, 1, ...[]); // OK
React.createElement(G2, {}, 1, ...[2]); // OK
React.createElement(G2, {}, 1, ...(any: Array<number>)); // OK

type NumberArrayRecursive = number | Array<NumberArrayRecursive>;
class H extends React.Component<{ children: NumberArrayRecursive }> {}
React.createElement(H, {}); // Error
React.createElement(H, {}, 1); // OK
React.createElement(H, {}, 1, 2); // OK
React.createElement(H, {}, 1, 2, 3); // OK
React.createElement(H, {}, [1, 2]); // OK
React.createElement(H, {}, [1, 2], [3, 4]); // OK
React.createElement(H, {}, ...[]); // Error
React.createElement(H, {}, ...[1]); // OK
React.createElement(H, {}, ...[1, 2]); // OK
React.createElement(H, {}, ...(any: Array<number>)); // Error
React.createElement(H, {}, 1, ...[]); // OK
React.createElement(H, {}, 1, ...[2]); // OK
React.createElement(H, {}, 1, ...(any: Array<number>)); // OK

class I extends React.Component<{ children?: number }> {}
React.createElement(I, {}); // OK
React.createElement(I, {}, undefined); // OK
React.createElement(I, {}, null); // Error
React.createElement(I, {}, 1); // OK
React.createElement(I, {}, 1, 2); // Error
React.createElement(I, {}, ...[]); // OK
React.createElement(I, {}, ...[1]); // OK
React.createElement(I, {}, ...[1, 2]); // Error
React.createElement(I, {}, ...(any: Array<number>)); // Error
React.createElement(I, {}, 1, ...[]); // OK
React.createElement(I, {}, 1, ...[2]); // Error
React.createElement(I, {}, 1, ...(any: Array<number>)); // Error

class J extends React.Component<{ children: ?number }> {}
React.createElement(J, {}); // Error
React.createElement(J, {}, undefined); // OK
React.createElement(J, {}, null); // OK
React.createElement(J, {}, 1); // OK
React.createElement(J, {}, 1, 2); // Error
React.createElement(J, {}, ...[]); // Error
React.createElement(J, {}, ...[1]); // OK
React.createElement(J, {}, ...[1, 2]); // Error
React.createElement(J, {}, ...(any: Array<number>)); // Error
React.createElement(J, {}, 1, ...[]); // OK
React.createElement(J, {}, 1, ...[2]); // Error
React.createElement(J, {}, 1, ...(any: Array<number>)); // Error

class K extends React.Component<{ children: number }> {}
React.createElement(K, {}, 42); // OK
React.createElement(K, { children: 42 }); // OK
React.createElement(K, { children: 42 }, 42); // OK
React.createElement(K, {}, "42"); // Error
React.createElement(K, { children: "42" }); // Error
React.createElement(K, { children: "42" }, 42); // Error
React.createElement(K, { children: 42 }, "42"); // Error
React.createElement(K, { children: "42" }, "42"); // Error

class L extends React.Component<{
  foo: number,
  bar: number,
  children: number,
}> {
  static defaultProps = { bar: 42 };
}
React.createElement(L, { foo: 1, bar: 2 }, 3); // OK
React.createElement(L, { foo: 1, bar: 2, children: 3 }); // OK
React.createElement(L, { foo: 1 }, 2); // OK
React.createElement(L, { foo: 1, children: 2 }); // OK
React.createElement(L, {}, 1); // Error
React.createElement(L, { children: 1 }); // Error
React.createElement(L, { bar: 1 }, 2); // Error
React.createElement(L, { bar: 1, children: 2 }); // Error
React.createElement(L, { foo: "1", bar: 2 }, 3); // Error
React.createElement(L, { foo: "1", bar: 2, children: 3 }); // Error
React.createElement(L, { foo: 1, bar: "2" }, 3); // Error
React.createElement(L, { foo: 1, bar: "2", children: 3 }); // Error
React.createElement(L, { foo: 1, bar: 2 }, "3"); // Error
React.createElement(L, { foo: 1, bar: 2, children: "3" }); // Error

class M extends React.Component<{}> {}
class N extends React.Component<{}> {}
(React.createElement(M).type: typeof M); // OK
(React.createElement(M).type: typeof N); // Error

================================================================================
`;

exports[`create_factory.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import React from 'react';

declare var any: any;

React.createFactory(any)(); // OK
React.createFactory(any)({}); // OK
React.createFactory(any)(undefined); // OK
React.createFactory(any)(null); // OK

class A extends React.Component<{foo: number, bar: number}, void> {}
function B(props: {foo: number, bar: number}) { return null }

const aFactory = React.createFactory(A);
const bFactory = React.createFactory(B);

aFactory({foo: 1, bar: 2}); // OK
bFactory({foo: 1, bar: 2}); // OK
aFactory({
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
bFactory({
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
aFactory({foo: 42}); // Error: \`bar\` is missing.
bFactory({foo: 42}); // Error: \`bar\` is missing.
aFactory(undefined); // Error: \`foo\` and \`bar\` are missing.
bFactory(undefined); // Error: \`foo\` and \`bar\` are missing.
aFactory(null); // Error: \`foo\` and \`bar\` are missing.
bFactory(null); // Error: \`foo\` and \`bar\` are missing.
(aFactory({foo: 1, bar: 2}).type: Class<A>); // OK
(bFactory({foo: 1, bar: 2}).type: typeof B); // OK
(aFactory({foo: 1, bar: 2}).props.foo: number); // OK
(bFactory({foo: 1, bar: 2}).props.foo: number); // OK
(aFactory({foo: 1, bar: 2}).props.foo: boolean); // Error: \`foo\` is \`number\`.
(bFactory({foo: 1, bar: 2}).props.foo: boolean); // Error: \`foo\` is \`number\`.
aFactory({foo: 1, bar: 2}).nope; // Error: \`nope\` does not exist.
bFactory({foo: 1, bar: 2}).nope; // Error: \`nope\` does not exist.
aFactory(); // Error: Missing \`foo\` and \`bar\`.
bFactory(); // Error: Missing \`foo\` and \`bar\`.

class C extends React.Component<{foo: number, bar: number}, void> {
  static defaultProps = {bar: 42};
}
function D(props: {foo: number, bar: number}) { return null }
D.defaultProps = {bar: 42};

const cFactory = React.createFactory(C);
const dFactory = React.createFactory(D);

cFactory({foo: 1, bar: 2}); // OK
dFactory({foo: 1, bar: 2}); // OK
cFactory({
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
dFactory({
  foo: 42,
  bar: 'Hello, world!', // Error: \`bar\` is a string.
});
cFactory({foo: 42}); // OK: \`bar\` is in \`defaultProps\`.
dFactory({foo: 42}); // OK: \`bar\` is in \`defaultProps\`.
(cFactory({foo: 42}).props.bar: number); // OK
(dFactory({foo: 42}).props.bar: number); // OK

const anyFactory = React.createFactory(any);

anyFactory({whateverYouWant: 'yes'}); // OK

class E extends React.Component<{children: number}, void> {}
const eFactory = React.createFactory(E);
eFactory({}); // Error
eFactory(undefined); // Error
eFactory(null); // Error
eFactory({}, 1); // OK
eFactory(undefined, 1); // OK
eFactory(null, 1); // OK
eFactory({}, 1, 2); // Error
eFactory(undefined, 1, 2); // Error
eFactory(null, 1, 2); // Error
eFactory({}, 1, 2, 3); // Error
eFactory({}, [1, 2]); // Error
eFactory({}, [1, 2], [3, 4]); // Error
eFactory({}, ...[]); // Error
eFactory({}, ...[1]); // OK
eFactory({}, ...[1, 2]); // Error
eFactory({}, ...(any: Array<number>)); // Error
eFactory({}, 1, ...[]); // OK
eFactory({}, 1, ...[2]); // Error
eFactory({}, 1, ...(any: Array<number>)); // Error

class F extends React.Component<{children: Array<number>}, void> {}
const fFactory = React.createFactory(F);
fFactory({}); // Error
fFactory(undefined); // Error
fFactory(null); // Error
fFactory({}, 1); // Error
fFactory(undefined, 1); // Error
fFactory(null, 1); // Error
fFactory({}, 1, 2); // OK
fFactory(undefined, 1, 2); // OK
fFactory(null, 1, 2); // OK
fFactory({}, 1, 2, 3); // OK
fFactory({}, [1, 2]); // OK
fFactory({}, [1, 2], [3, 4]); // Error
fFactory({}, ...[]); // Error
fFactory({}, ...[1]); // Error
fFactory({}, ...[1, 2]); // OK
fFactory({}, ...(any: Array<number>)); // Error
fFactory({}, 1, ...[]); // Error
fFactory({}, 1, ...[2]); // OK
fFactory({}, 1, ...(any: Array<number>)); // Error

class G extends React.Component<{children: number | Array<number>}, void> {}
const gFactory = React.createFactory(G);
gFactory({}); // Error
gFactory({}, 1); // OK
gFactory({}, 1, 2); // OK
gFactory({}, 1, 2, 3); // OK
gFactory({}, [1, 2]); // OK
gFactory({}, [1, 2], [3, 4]); // Error
gFactory({}, ...[]); // Error
gFactory({}, ...[1]); // OK
gFactory({}, ...[1, 2]); // OK
gFactory({}, ...(any: Array<number>)); // Error
gFactory({}, 1, ...[]); // OK
gFactory({}, 1, ...[2]); // OK
gFactory({}, 1, ...(any: Array<number>)); // OK

type NumberArrayRecursive = number | Array<NumberArrayRecursive>;
class H extends React.Component<{children: NumberArrayRecursive}, void> {}
const hFactory = React.createFactory(H);
hFactory({}); // Error
hFactory({}, 1); // OK
hFactory({}, 1, 2); // OK
hFactory({}, 1, 2, 3); // OK
hFactory({}, [1, 2]); // OK
hFactory({}, [1, 2], [3, 4]); // OK
hFactory({}, ...[]); // Error
hFactory({}, ...[1]); // OK
hFactory({}, ...[1, 2]); // OK
hFactory({}, ...(any: Array<number>)); // Error
hFactory({}, 1, ...[]); // OK
hFactory({}, 1, ...[2]); // OK
hFactory({}, 1, ...(any: Array<number>)); // OK

class I extends React.Component<{children?: number}, void> {}
const iFactory = React.createFactory(I);
iFactory({}); // OK
iFactory({}, undefined); // OK
iFactory({}, null); // Error
iFactory({}, 1); // OK
iFactory({}, 1, 2); // Error
iFactory({}, ...[]); // OK
iFactory({}, ...[1]); // OK
iFactory({}, ...[1, 2]); // Error
iFactory({}, ...(any: Array<number>)); // Error
iFactory({}, 1, ...[]); // OK
iFactory({}, 1, ...[2]); // Error
iFactory({}, 1, ...(any: Array<number>)); // Error

class J extends React.Component<{children: ?number}, void> {}
const jFactory = React.createFactory(J);
jFactory({}); // Error
jFactory({}, undefined); // OK
jFactory({}, null); // OK
jFactory({}, 1); // OK
jFactory({}, 1, 2); // Error
jFactory({}, ...[]); // Error
jFactory({}, ...[1]); // OK
jFactory({}, ...[1, 2]); // Error
jFactory({}, ...(any: Array<number>)); // Error
jFactory({}, 1, ...[]); // OK
jFactory({}, 1, ...[2]); // Error
jFactory({}, 1, ...(any: Array<number>)); // Error

class K extends React.Component<{children: number}, void> {}
const kFactory = React.createFactory(K);
kFactory({}, 42); // OK
kFactory({children: 42}); // OK
kFactory({children: 42}, 42); // OK
kFactory({}, '42'); // Error
kFactory({children: '42'}); // Error
kFactory({children: '42'}, 42); // Error
kFactory({children: 42}, '42'); // Error
kFactory({children: '42'}, '42'); // Error

class L extends React.Component<{
  foo: number,
  bar: number,
  children: number,
}, void> {
  static defaultProps = {bar: 42};
}
const lFactory = React.createFactory(L);
lFactory({foo: 1, bar: 2}, 3); // OK
lFactory({foo: 1, bar: 2, children: 3}); // OK
lFactory({foo: 1}, 2); // OK
lFactory({foo: 1, children: 2}); // OK
lFactory({}, 1); // Error
lFactory({children: 1}); // Error
lFactory({bar: 1}, 2); // Error
lFactory({bar: 1, children: 2}); // Error
lFactory({foo: '1', bar: 2}, 3); // Error
lFactory({foo: '1', bar: 2, children: 3}); // Error
lFactory({foo: 1, bar: '2'}, 3); // Error
lFactory({foo: 1, bar: '2', children: 3}); // Error
lFactory({foo: 1, bar: 2}, '3'); // Error
lFactory({foo: 1, bar: 2, children: '3'}); // Error

class M extends React.Component<{}> {}
class N extends React.Component<{}> {}
const mFactory = React.createFactory(M);
(mFactory().type: typeof M); // OK
(mFactory().type: typeof N); // Error

=====================================output=====================================
// @flow

import React from "react";

declare var any: any;

React.createFactory(any)(); // OK
React.createFactory(any)({}); // OK
React.createFactory(any)(undefined); // OK
React.createFactory(any)(null); // OK

class A extends React.Component<{ foo: number, bar: number }, void> {}
function B(props: { foo: number, bar: number }) {
  return null;
}

const aFactory = React.createFactory(A);
const bFactory = React.createFactory(B);

aFactory({ foo: 1, bar: 2 }); // OK
bFactory({ foo: 1, bar: 2 }); // OK
aFactory({
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
bFactory({
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
aFactory({ foo: 42 }); // Error: \`bar\` is missing.
bFactory({ foo: 42 }); // Error: \`bar\` is missing.
aFactory(undefined); // Error: \`foo\` and \`bar\` are missing.
bFactory(undefined); // Error: \`foo\` and \`bar\` are missing.
aFactory(null); // Error: \`foo\` and \`bar\` are missing.
bFactory(null); // Error: \`foo\` and \`bar\` are missing.
(aFactory({ foo: 1, bar: 2 }).type: Class<A>); // OK
(bFactory({ foo: 1, bar: 2 }).type: typeof B); // OK
(aFactory({ foo: 1, bar: 2 }).props.foo: number); // OK
(bFactory({ foo: 1, bar: 2 }).props.foo: number); // OK
(aFactory({ foo: 1, bar: 2 }).props.foo: boolean); // Error: \`foo\` is \`number\`.
(bFactory({ foo: 1, bar: 2 }).props.foo: boolean); // Error: \`foo\` is \`number\`.
aFactory({ foo: 1, bar: 2 }).nope; // Error: \`nope\` does not exist.
bFactory({ foo: 1, bar: 2 }).nope; // Error: \`nope\` does not exist.
aFactory(); // Error: Missing \`foo\` and \`bar\`.
bFactory(); // Error: Missing \`foo\` and \`bar\`.

class C extends React.Component<{ foo: number, bar: number }, void> {
  static defaultProps = { bar: 42 };
}
function D(props: { foo: number, bar: number }) {
  return null;
}
D.defaultProps = { bar: 42 };

const cFactory = React.createFactory(C);
const dFactory = React.createFactory(D);

cFactory({ foo: 1, bar: 2 }); // OK
dFactory({ foo: 1, bar: 2 }); // OK
cFactory({
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
dFactory({
  foo: 42,
  bar: "Hello, world!", // Error: \`bar\` is a string.
});
cFactory({ foo: 42 }); // OK: \`bar\` is in \`defaultProps\`.
dFactory({ foo: 42 }); // OK: \`bar\` is in \`defaultProps\`.
(cFactory({ foo: 42 }).props.bar: number); // OK
(dFactory({ foo: 42 }).props.bar: number); // OK

const anyFactory = React.createFactory(any);

anyFactory({ whateverYouWant: "yes" }); // OK

class E extends React.Component<{ children: number }, void> {}
const eFactory = React.createFactory(E);
eFactory({}); // Error
eFactory(undefined); // Error
eFactory(null); // Error
eFactory({}, 1); // OK
eFactory(undefined, 1); // OK
eFactory(null, 1); // OK
eFactory({}, 1, 2); // Error
eFactory(undefined, 1, 2); // Error
eFactory(null, 1, 2); // Error
eFactory({}, 1, 2, 3); // Error
eFactory({}, [1, 2]); // Error
eFactory({}, [1, 2], [3, 4]); // Error
eFactory({}, ...[]); // Error
eFactory({}, ...[1]); // OK
eFactory({}, ...[1, 2]); // Error
eFactory({}, ...(any: Array<number>)); // Error
eFactory({}, 1, ...[]); // OK
eFactory({}, 1, ...[2]); // Error
eFactory({}, 1, ...(any: Array<number>)); // Error

class F extends React.Component<{ children: Array<number> }, void> {}
const fFactory = React.createFactory(F);
fFactory({}); // Error
fFactory(undefined); // Error
fFactory(null); // Error
fFactory({}, 1); // Error
fFactory(undefined, 1); // Error
fFactory(null, 1); // Error
fFactory({}, 1, 2); // OK
fFactory(undefined, 1, 2); // OK
fFactory(null, 1, 2); // OK
fFactory({}, 1, 2, 3); // OK
fFactory({}, [1, 2]); // OK
fFactory({}, [1, 2], [3, 4]); // Error
fFactory({}, ...[]); // Error
fFactory({}, ...[1]); // Error
fFactory({}, ...[1, 2]); // OK
fFactory({}, ...(any: Array<number>)); // Error
fFactory({}, 1, ...[]); // Error
fFactory({}, 1, ...[2]); // OK
fFactory({}, 1, ...(any: Array<number>)); // Error

class G extends React.Component<{ children: number | Array<number> }, void> {}
const gFactory = React.createFactory(G);
gFactory({}); // Error
gFactory({}, 1); // OK
gFactory({}, 1, 2); // OK
gFactory({}, 1, 2, 3); // OK
gFactory({}, [1, 2]); // OK
gFactory({}, [1, 2], [3, 4]); // Error
gFactory({}, ...[]); // Error
gFactory({}, ...[1]); // OK
gFactory({}, ...[1, 2]); // OK
gFactory({}, ...(any: Array<number>)); // Error
gFactory({}, 1, ...[]); // OK
gFactory({}, 1, ...[2]); // OK
gFactory({}, 1, ...(any: Array<number>)); // OK

type NumberArrayRecursive = number | Array<NumberArrayRecursive>;
class H extends React.Component<{ children: NumberArrayRecursive }, void> {}
const hFactory = React.createFactory(H);
hFactory({}); // Error
hFactory({}, 1); // OK
hFactory({}, 1, 2); // OK
hFactory({}, 1, 2, 3); // OK
hFactory({}, [1, 2]); // OK
hFactory({}, [1, 2], [3, 4]); // OK
hFactory({}, ...[]); // Error
hFactory({}, ...[1]); // OK
hFactory({}, ...[1, 2]); // OK
hFactory({}, ...(any: Array<number>)); // Error
hFactory({}, 1, ...[]); // OK
hFactory({}, 1, ...[2]); // OK
hFactory({}, 1, ...(any: Array<number>)); // OK

class I extends React.Component<{ children?: number }, void> {}
const iFactory = React.createFactory(I);
iFactory({}); // OK
iFactory({}, undefined); // OK
iFactory({}, null); // Error
iFactory({}, 1); // OK
iFactory({}, 1, 2); // Error
iFactory({}, ...[]); // OK
iFactory({}, ...[1]); // OK
iFactory({}, ...[1, 2]); // Error
iFactory({}, ...(any: Array<number>)); // Error
iFactory({}, 1, ...[]); // OK
iFactory({}, 1, ...[2]); // Error
iFactory({}, 1, ...(any: Array<number>)); // Error

class J extends React.Component<{ children: ?number }, void> {}
const jFactory = React.createFactory(J);
jFactory({}); // Error
jFactory({}, undefined); // OK
jFactory({}, null); // OK
jFactory({}, 1); // OK
jFactory({}, 1, 2); // Error
jFactory({}, ...[]); // Error
jFactory({}, ...[1]); // OK
jFactory({}, ...[1, 2]); // Error
jFactory({}, ...(any: Array<number>)); // Error
jFactory({}, 1, ...[]); // OK
jFactory({}, 1, ...[2]); // Error
jFactory({}, 1, ...(any: Array<number>)); // Error

class K extends React.Component<{ children: number }, void> {}
const kFactory = React.createFactory(K);
kFactory({}, 42); // OK
kFactory({ children: 42 }); // OK
kFactory({ children: 42 }, 42); // OK
kFactory({}, "42"); // Error
kFactory({ children: "42" }); // Error
kFactory({ children: "42" }, 42); // Error
kFactory({ children: 42 }, "42"); // Error
kFactory({ children: "42" }, "42"); // Error

class L extends React.Component<
  {
    foo: number,
    bar: number,
    children: number,
  },
  void
> {
  static defaultProps = { bar: 42 };
}
const lFactory = React.createFactory(L);
lFactory({ foo: 1, bar: 2 }, 3); // OK
lFactory({ foo: 1, bar: 2, children: 3 }); // OK
lFactory({ foo: 1 }, 2); // OK
lFactory({ foo: 1, children: 2 }); // OK
lFactory({}, 1); // Error
lFactory({ children: 1 }); // Error
lFactory({ bar: 1 }, 2); // Error
lFactory({ bar: 1, children: 2 }); // Error
lFactory({ foo: "1", bar: 2 }, 3); // Error
lFactory({ foo: "1", bar: 2, children: 3 }); // Error
lFactory({ foo: 1, bar: "2" }, 3); // Error
lFactory({ foo: 1, bar: "2", children: 3 }); // Error
lFactory({ foo: 1, bar: 2 }, "3"); // Error
lFactory({ foo: 1, bar: 2, children: "3" }); // Error

class M extends React.Component<{}> {}
class N extends React.Component<{}> {}
const mFactory = React.createFactory(M);
(mFactory().type: typeof M); // OK
(mFactory().type: typeof N); // Error

================================================================================
`;
