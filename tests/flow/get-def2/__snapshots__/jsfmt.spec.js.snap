// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Child.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

var { ParentFoo } = require('./Parent');
module.exports = { ChildFoo : ParentFoo }

=====================================output=====================================
// @flow

var { ParentFoo } = require("./Parent");
module.exports = { ChildFoo: ParentFoo };

================================================================================
`;

exports[`Parent.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

var ParentFoo = {foo: 'bar'};
module.exports = {ParentFoo};

=====================================output=====================================
// @flow

var ParentFoo = { foo: "bar" };
module.exports = { ParentFoo };

================================================================================
`;

exports[`declare.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare var foo: number;
foo;

declare export var bar;
bar;

declare function baz(): void;
baz();

declare class Foo {};
new Foo();

=====================================output=====================================
// @flow

declare var foo: number;
foo;

declare export var bar;
bar;

declare function baz(): void;
baz();

declare class Foo {}
new Foo();

================================================================================
`;

exports[`main.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

var Parent = require('./Parent');

// Hops through destructuring
let ParentFoo;
({ParentFoo} = Parent);
ParentFoo; // Points to lval in line above this

// Follows assignment on simple/"non-destructuring" patterns
let Parent2;
Parent2 = Parent;
Parent2; // Points to LHS of line above this

// Follows assignment with declaration
let Parent3 = Parent;
Parent3; // Points to LHS of line above this

// Follows non-destructured property access of \`require('Parent')\`
let foo = require('./Parent').ParentFoo.foo;
foo;

import type {Foo} from './types';
function takesFoo(foo: Foo) { }

{
  let require = (x : string) => x === './Parent';
  let adopted = require('./Parent');
  adopted;
}

var Child = require('./Child');
Child.ChildFoo.foo;

=====================================output=====================================
// @flow

var Parent = require("./Parent");

// Hops through destructuring
let ParentFoo;
({ ParentFoo } = Parent);
ParentFoo; // Points to lval in line above this

// Follows assignment on simple/"non-destructuring" patterns
let Parent2;
Parent2 = Parent;
Parent2; // Points to LHS of line above this

// Follows assignment with declaration
let Parent3 = Parent;
Parent3; // Points to LHS of line above this

// Follows non-destructured property access of \`require('Parent')\`
let foo = require("./Parent").ParentFoo.foo;
foo;

import type { Foo } from "./types";
function takesFoo(foo: Foo) {}

{
  let require = (x: string) => x === "./Parent";
  let adopted = require("./Parent");
  adopted;
}

var Child = require("./Child");
Child.ChildFoo.foo;

================================================================================
`;

exports[`override.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

class C {
  override() { }
}

class D extends C {
  foo() { this.override() }
  bar() { this.override }
  override() {
    super.override();
    super.override;
  }
}

=====================================output=====================================
// @flow

class C {
  override() {}
}

class D extends C {
  foo() {
    this.override();
  }
  bar() {
    this.override;
  }
  override() {
    super.override();
    super.override;
  }
}

================================================================================
`;

exports[`react.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

var React = require('react');

type Props = { x: string };
class C extends React.Component<Props> {
}

let msg = "hello";

(<C x={msg}/>);

(<div id={msg}/>);

=====================================output=====================================
// @flow

var React = require("react");

type Props = { x: string };
class C extends React.Component<Props> {}

let msg = "hello";

<C x={msg} />;

<div id={msg} />;

================================================================================
`;

exports[`refinements.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

type Foo = {
  kind: 'asdf',
} | {
  kind: 'jkl;',
}

function foo(x: Foo): void {
  if (x.kind === 'jkl;') {}
  if (x.kind) {}
}

=====================================output=====================================
// @flow

type Foo =
  | {
      kind: "asdf",
    }
  | {
      kind: "jkl;",
    };

function foo(x: Foo): void {
  if (x.kind === "jkl;") {
  }
  if (x.kind) {
  }
}

================================================================================
`;

exports[`require.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

const { ParentFoo } = require('./Parent');
ParentFoo;

=====================================output=====================================
// @flow

const { ParentFoo } = require("./Parent");
ParentFoo;

================================================================================
`;

exports[`types.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

export type Foo = {};

=====================================output=====================================
// @flow

export type Foo = {};

================================================================================
`;
