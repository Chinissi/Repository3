// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`driver.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import type { B as B1 } from './test1';
const b1 = require('./test1');

import type { B as B2 } from './test2';
const b2 = require('./test2');

(b1: B1); // Error number ~> string
(b1.x: string); // Error number ~> string
(b1.y: string); // Error, y may not exist, number ~> string
(b1.z: string); // Error, z may not exist, number ~> string

(b2: B2); // Error, number ~> string
(b2.x: string); // Error number ~> string
(b2.z: string); // Error number ~> string

=====================================output=====================================
// @flow

import type { B as B1 } from "./test1";
const b1 = require("./test1");

import type { B as B2 } from "./test2";
const b2 = require("./test2");

(b1: B1); // Error number ~> string
(b1.x: string); // Error number ~> string
(b1.y: string); // Error, y may not exist, number ~> string
(b1.z: string); // Error, z may not exist, number ~> string

(b2: B2); // Error, number ~> string
(b2.x: string); // Error number ~> string
(b2.z: string); // Error number ~> string

================================================================================
`;

exports[`test1.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

type A = {| x: number |} | {| y: number |}

const a: A = { x: 0 };
const b = { z: 0, ...a };
(b.x: string); // Error, might not be on b or will be number
(b.y: string); // Error, might not be on b or will be number
(b.z: string); // Error number ~> string

export type B = {| z: number, ...A |}
module.exports = b;

=====================================output=====================================
// @flow

type A = {| x: number |} | {| y: number |};

const a: A = { x: 0 };
const b = { z: 0, ...a };
(b.x: string); // Error, might not be on b or will be number
(b.y: string); // Error, might not be on b or will be number
(b.z: string); // Error number ~> string

export type B = {| z: number, ...A |};
module.exports = b;

================================================================================
`;

exports[`test2.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

const a = { x: 0 };
const b = { z: 0, ...a };
(b.x: string);
(b.z: string);

type A = {| x: number |}
export type B = {| z: number, ...A |}
module.exports = b;

=====================================output=====================================
// @flow

const a = { x: 0 };
const b = { z: 0, ...a };
(b.x: string);
(b.z: string);

type A = {| x: number |};
export type B = {| z: number, ...A |};
module.exports = b;

================================================================================
`;
