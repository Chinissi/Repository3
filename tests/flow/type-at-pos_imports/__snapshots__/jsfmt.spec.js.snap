// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exports.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

exports.klass = class klass<T> { }

exports.foo = function foo() {}

=====================================output=====================================
// @flow

exports.klass = class klass<T> {};

exports.foo = function foo() {};

================================================================================
`;

exports[`exports-class.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare class C {}
export { C }

=====================================output=====================================
// @flow

declare class C {}
export { C };

================================================================================
`;

exports[`exports-default-class.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare class Base {}
class B extends Base {}

module.exports = B;

=====================================output=====================================
// @flow

declare class Base {}
class B extends Base {}

module.exports = B;

================================================================================
`;

exports[`exports-default-class-funcall-a.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare class Base {}
class B extends Base {}

function foo() { return B };

module.exports = foo();

=====================================output=====================================
// @flow

declare class Base {}
class B extends Base {}

function foo() {
  return B;
}

module.exports = foo();

================================================================================
`;

exports[`exports-default-class-funcall-b.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare class Base {}
class B extends Base {}

function foo() { return B };

module.exports = foo();

=====================================output=====================================
// @flow

declare class Base {}
class B extends Base {}

function foo() {
  return B;
}

module.exports = foo();

================================================================================
`;

exports[`exports-default-function.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

export type FileOneType = {s: string, n: number};

const fileOneFunc = (a: FileOneType) => {};
module.exports = fileOneFunc;

=====================================output=====================================
// @flow

export type FileOneType = { s: string, n: number };

const fileOneFunc = (a: FileOneType) => {};
module.exports = fileOneFunc;

================================================================================
`;

exports[`exports-default-instance.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare class Base {}
class A extends Base {}

module.exports = new A();

=====================================output=====================================
// @flow

declare class Base {}
class A extends Base {}

module.exports = new A();

================================================================================
`;

exports[`exports-default-poly-class.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

class B<X> {}

module.exports = B;

=====================================output=====================================
// @flow

class B<X> {}

module.exports = B;

================================================================================
`;

exports[`exports-default-poly-instance.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

class P<X> {}

module.exports = new P<number>();

=====================================output=====================================
// @flow

class P<X> {}

module.exports = new P<number>();

================================================================================
`;

exports[`exports-poly-class.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

class P<X> {}

module.exports = { P };

=====================================output=====================================
// @flow

class P<X> {}

module.exports = { P };

================================================================================
`;

exports[`exports-type.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

export type MyUnionType = 'A' | 'B' | 'C';

=====================================output=====================================
// @flow

export type MyUnionType = "A" | "B" | "C";

================================================================================
`;

exports[`import.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
var num = 42;
function bar() { }
bar();
module.exports = num;

=====================================output=====================================
// @flow
var num = 42;
function bar() {}
bar();
module.exports = num;

================================================================================
`;

exports[`import_interfaces.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

export interface Logger {
  isActive(): boolean;
  start(): void;
  stop(): void;
}

export interface Listener<TFields> {
  isEnabled(): boolean;
  enable(): void;
  disable(): void;
  toggle(): void;
  listen(eventCategory: ?string, eventName: string, data: TFields): void;
}

exports.MyClass = class MyClass<A> {
  constructor(x: A) { }
}

=====================================output=====================================
// @flow

export interface Logger {
  isActive(): boolean;
  start(): void;
  stop(): void;
}

export interface Listener<TFields> {
  isEnabled(): boolean;
  enable(): void;
  disable(): void;
  toggle(): void;
  listen(eventCategory: ?string, eventName: string, data: TFields): void;
}

exports.MyClass = class MyClass<A> {
  constructor(x: A) {}
};

================================================================================
`;

exports[`import_lib.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import type { Listener, Logger } from './import_interfaces';

class AdsULLogger<TFields> implements Logger {
  _enabled: boolean;
  _listeners: Array<Listener<TFields>>;

  isActive(): boolean {
    return this._enabled;
  }
  start(): void {
    this._enabled = true;
  }
  stop(): void {
    this._enabled = false;
  }
}

=====================================output=====================================
// @flow

import type { Listener, Logger } from "./import_interfaces";

class AdsULLogger<TFields> implements Logger {
  _enabled: boolean;
  _listeners: Array<Listener<TFields>>;

  isActive(): boolean {
    return this._enabled;
  }
  start(): void {
    this._enabled = true;
  }
  stop(): void {
    this._enabled = false;
  }
}

================================================================================
`;

exports[`import_lib_named.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import type { Listener as MyListener, Logger } from './import_interfaces';

=====================================output=====================================
// @flow

import type { Listener as MyListener, Logger } from "./import_interfaces";

================================================================================
`;

exports[`import-class-as-type.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import type { C } from './exports-class';
import type { P } from './exports-poly-class';
import type { C as LocalC } from './exports-class';
import type { P as LocalP } from './exports-poly-class';

declare var c: C;
declare var p: P<number>;
declare var lc: LocalC;
declare var lp: LocalP<number>;

=====================================output=====================================
// @flow

import type { C } from "./exports-class";
import type { P } from "./exports-poly-class";
import type { C as LocalC } from "./exports-class";
import type { P as LocalP } from "./exports-poly-class";

declare var c: C;
declare var p: P<number>;
declare var lc: LocalC;
declare var lp: LocalP<number>;

================================================================================
`;

exports[`import-default.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import typeof ImportedDefaultFunction from './exports-default-function';

import typeof ImportedDefaultInstance from "./exports-default-instance";
import typeof ImportedDefaultPolyInstance from "./exports-default-poly-instance";
import type ImportedTypeDefaultClass from "./exports-default-class";
import type ImportedTypeDefaultClassTwice from "./exports-default-class";
import type ImportedTypeDefaultPolyClass from "./exports-default-poly-class";
import typeof ImportedTypeofDefaultClass from "./exports-default-class";
import typeof ImportedTypeofDefaultClassTwice from "./exports-default-class";
import typeof ImportedTypeofDefaultPolyClass from "./exports-default-poly-class";
import typeof ImportedTypeofDefaultClassFuncall from "./exports-default-class-funcall-a";
import ImportedValueDefaultClassFuncall from "./exports-default-class-funcall-b";

declare var f1: ImportedDefaultInstance; // (Remote) A
declare var f2: ImportedDefaultPolyInstance; // (Remote) P<number>
declare var f3: ImportedTypeDefaultClass; // ImportedTypeDefaultClass
declare var f4: ImportedTypeDefaultPolyClass<number>; // ImportedTypeDefaultPolyClass<number>
declare var f5: ImportedTypeofDefaultClass; // ImportedTypeofDefaultClass
declare var f6: ImportedTypeofDefaultPolyClass; // ImportedTypeofDefaultPolyClass<number>
declare var f7: ImportedTypeofDefaultClassFuncall; // ImportedTypeofDefaultClassFuncall
declare var f8: ImportedValueDefaultClassFuncall; // ImportedValueDefaultClassFuncall

=====================================output=====================================
// @flow

import typeof ImportedDefaultFunction from "./exports-default-function";

import typeof ImportedDefaultInstance from "./exports-default-instance";
import typeof ImportedDefaultPolyInstance from "./exports-default-poly-instance";
import type ImportedTypeDefaultClass from "./exports-default-class";
import type ImportedTypeDefaultClassTwice from "./exports-default-class";
import type ImportedTypeDefaultPolyClass from "./exports-default-poly-class";
import typeof ImportedTypeofDefaultClass from "./exports-default-class";
import typeof ImportedTypeofDefaultClassTwice from "./exports-default-class";
import typeof ImportedTypeofDefaultPolyClass from "./exports-default-poly-class";
import typeof ImportedTypeofDefaultClassFuncall from "./exports-default-class-funcall-a";
import ImportedValueDefaultClassFuncall from "./exports-default-class-funcall-b";

declare var f1: ImportedDefaultInstance; // (Remote) A
declare var f2: ImportedDefaultPolyInstance; // (Remote) P<number>
declare var f3: ImportedTypeDefaultClass; // ImportedTypeDefaultClass
declare var f4: ImportedTypeDefaultPolyClass<number>; // ImportedTypeDefaultPolyClass<number>
declare var f5: ImportedTypeofDefaultClass; // ImportedTypeofDefaultClass
declare var f6: ImportedTypeofDefaultPolyClass; // ImportedTypeofDefaultPolyClass<number>
declare var f7: ImportedTypeofDefaultClassFuncall; // ImportedTypeofDefaultClassFuncall
declare var f8: ImportedValueDefaultClassFuncall; // ImportedValueDefaultClassFuncall

================================================================================
`;

exports[`import-type.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import type { MyUnionType } from './exports-type';

=====================================output=====================================
// @flow

import type { MyUnionType } from "./exports-type";

================================================================================
`;

exports[`import-typeof-class.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import typeof { C } from './exports-class';
import typeof { C as D } from './exports-class';

declare var c: C;
declare var d: D;

=====================================output=====================================
// @flow

import typeof { C } from "./exports-class";
import typeof { C as D } from "./exports-class";

declare var c: C;
declare var d: D;

================================================================================
`;

exports[`module-export-0.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare module a {
  declare export class A {}
}

declare var m: $Exports<'a'>;
export var m = m;

=====================================output=====================================
// @flow

declare module a {
  declare export class A {}
}

declare var m: $Exports<"a">;
export var m = m;

================================================================================
`;

exports[`module-export-1.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

module.exports = 1;
(module.exports: number);

if (0 < 1) {
  module.exports = "blah";
  (module.exports: string);
}
(module.exports: number | string);

=====================================output=====================================
// @flow

module.exports = 1;
(module.exports: number);

if (0 < 1) {
  module.exports = "blah";
  (module.exports: string);
}
(module.exports: number | string);

================================================================================
`;

exports[`module-import.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

const m = require('./module-export-0');

=====================================output=====================================
// @flow

const m = require("./module-export-0");

================================================================================
`;

exports[`require-class.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

const { C, C: D } = require('./exports-class');

declare var c: C;
declare var d: D;

=====================================output=====================================
// @flow

const { C, C: D } = require("./exports-class");

declare var c: C;
declare var d: D;

================================================================================
`;

exports[`test.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
var str = require('./import');
function foo() { }
foo();
str

type Point = [number, string];
const x:Point = [1, "foo"];
type MyStr = "cool";
const y:MyStr = "cool";
type MyBool = true;
const z:MyBool = true;
type MyNum = 42;
const w:MyNum = 42;

=====================================output=====================================
// @flow
var str = require("./import");
function foo() {}
foo();
str;

type Point = [number, string];
const x: Point = [1, "foo"];
type MyStr = "cool";
const y: MyStr = "cool";
type MyBool = true;
const z: MyBool = true;
type MyNum = 42;
const w: MyNum = 42;

================================================================================
`;
