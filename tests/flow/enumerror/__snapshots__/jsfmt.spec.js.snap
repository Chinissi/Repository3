// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`enum-crash.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * @flow
 * @format
 */
import type {Enum} from 'somewhere';

function bar(e: Enum) {
  switch (e) {
    case Enum.FOO:
      return 0;
    default:
      return null;
  }
}

=====================================output=====================================
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * @flow
 * @format
 */
import type { Enum } from "somewhere";

function bar(e: Enum) {
  switch (e) {
    case Enum.FOO:
      return 0;
    default:
      return null;
  }
}

================================================================================
`;

exports[`enumerror.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/** @flow */

function isActive(ad: {state: $Keys<{
    PAUSED: string;
    ACTIVE: string;
    DELETED: string;
}>}): boolean {
    return ad.state === 'ACTIVE';
};
isActive({state: 'PAUSE'});

var MyStates = {
    PAUSED: 'PAUSED',
    ACTIVE: 'ACTIVE',
    DELETED: 'DELETED',
};
function isActive2(ad: {state: $Keys<typeof MyStates>}): boolean {
    return ad.state === MyStates.ACTIVE;
};
isActive2({state: 'PAUSE'});

type Keys = $Keys<{ x: any, y: any }>;
type Union = "x" | "y"

function keys2union(s: Keys): Union { return s; } // ok
function union2keys(s: Union): Keys { return s; } // ok

=====================================output=====================================
/** @flow */

function isActive(ad: {
  state: $Keys<{
    PAUSED: string,
    ACTIVE: string,
    DELETED: string,
  }>,
}): boolean {
  return ad.state === "ACTIVE";
}
isActive({ state: "PAUSE" });

var MyStates = {
  PAUSED: "PAUSED",
  ACTIVE: "ACTIVE",
  DELETED: "DELETED",
};
function isActive2(ad: { state: $Keys<typeof MyStates> }): boolean {
  return ad.state === MyStates.ACTIVE;
}
isActive2({ state: "PAUSE" });

type Keys = $Keys<{ x: any, y: any }>;
type Union = "x" | "y";

function keys2union(s: Keys): Union {
  return s;
} // ok
function union2keys(s: Union): Keys {
  return s;
} // ok

================================================================================
`;
