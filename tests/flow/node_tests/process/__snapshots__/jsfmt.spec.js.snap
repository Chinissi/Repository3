// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`emitWarning.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

/* emitWarning */

process.emitWarning("blah");
process.emitWarning(new Error("blah"));
process.emitWarning("blah", "blah");
process.emitWarning("blah", "blah", () => {});

process.emitWarning(); // error
process.emitWarning(42); // error
process.emitWarning("blah", 42); // error
process.emitWarning("blah", "blah", 42); // error
(process.emitWarning("blah"): string); // error

=====================================output=====================================
/* @flow */

/* emitWarning */

process.emitWarning("blah");
process.emitWarning(new Error("blah"));
process.emitWarning("blah", "blah");
process.emitWarning("blah", "blah", () => {});

process.emitWarning(); // error
process.emitWarning(42); // error
process.emitWarning("blah", 42); // error
process.emitWarning("blah", "blah", 42); // error
(process.emitWarning("blah"): string); // error

================================================================================
`;

exports[`nextTick.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

process.nextTick(() => {});

process.nextTick(
  (a: string, b: number, c: boolean) => {},
  'z',
  1,
  true
);

process.nextTick(
  (a: string, b: number, c: boolean) => {},
  0, // Error: number ~> string
  1,
  null // Error: null ~> boolean
);

process.nextTick(
  (a: string, b: number, c: boolean) => {},
  'z',
  'y', // Error: string ~> number
  true
);

process.nextTick(
  (a: string, b: number, c: boolean) => {} // Error: too few arguments
);

=====================================output=====================================
/* @flow */

process.nextTick(() => {});

process.nextTick((a: string, b: number, c: boolean) => {}, "z", 1, true);

process.nextTick(
  (a: string, b: number, c: boolean) => {},
  0, // Error: number ~> string
  1,
  null // Error: null ~> boolean
);

process.nextTick(
  (a: string, b: number, c: boolean) => {},
  "z",
  "y", // Error: string ~> number
  true
);

process.nextTick(
  (a: string, b: number, c: boolean) => {} // Error: too few arguments
);

================================================================================
`;

exports[`process.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

(process.allowedNodeEnvironmentFlags: Set<string>);

(process.allowedNodeEnvironmentFlags: string); // error

=====================================output=====================================
/* @flow */

(process.allowedNodeEnvironmentFlags: Set<string>);

(process.allowedNodeEnvironmentFlags: string); // error

================================================================================
`;
