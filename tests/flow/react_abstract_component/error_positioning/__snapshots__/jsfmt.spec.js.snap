// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`C.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow
const React = require('react');
const View = require('./View');

type Props = {|
  component: React$ComponentType<*>,
|};

class C extends React.PureComponent<Props> {

  render(): React.Node {

    const Component = this.props.component;

    return (
      <Component {...this.props} />
    );
  }
}

module.exports = C;

=====================================output=====================================
//@flow
const React = require("react");
const View = require("./View");

type Props = {|
  component: React$ComponentType<*>,
|};

class C extends React.PureComponent<Props> {
  render(): React.Node {
    const Component = this.props.component;

    return <Component {...this.props} />;
  }
}

module.exports = C;

================================================================================
`;

exports[`View.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow
const React = require('react');

type ViewNativeComponentType = Class<React.Component<{||}>>;

declare var View: ViewNativeComponentType;

module.exports = View;

=====================================output=====================================
//@flow
const React = require("react");

type ViewNativeComponentType = Class<React.Component<{||}>>;

declare var View: ViewNativeComponentType;

module.exports = View;

================================================================================
`;

exports[`error_positioning.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
// Errors should always point to the components. This is a regression test to
// make sure we don't ruin reason locations that go through EvalTs.

const React = require('react');

declare function HOC<
  Props: {},
  TComponent: React.ComponentType<Props>,
>(
  Component: TComponent,
): React.ComponentType<
   $Diff<React.ElementConfig<TComponent>, {foo: void}>
>;
type MockFn<TArguments: $ReadOnlyArray<*>, TReturn> = {
  (...args: TArguments): TReturn,
  mock: {
    calls: Array<TArguments>,
  }
};

declare function fn<TArguments: $ReadOnlyArray<*>, TReturn>(
  implementation?: (...args: TArguments) => TReturn,
): MockFn<TArguments, TReturn>

const Component = fn(({user}) => (
  <div />
));


let RefetchContainer = HOC(Component); // Error, mock is not a Component
<RefetchContainer />;

// This test makes sure that create element issues always point to callers of the
// component instead of the defintion
const C = require('./C');
const View = require('./View');

const _a = <C component={View}></ C>;

=====================================output=====================================
// @flow
// Errors should always point to the components. This is a regression test to
// make sure we don't ruin reason locations that go through EvalTs.

const React = require("react");

declare function HOC<Props: {}, TComponent: React.ComponentType<Props>>(
  Component: TComponent
): React.ComponentType<$Diff<React.ElementConfig<TComponent>, { foo: void }>>;
type MockFn<TArguments: $ReadOnlyArray<*>, TReturn> = {
  (...args: TArguments): TReturn,
  mock: {
    calls: Array<TArguments>,
  },
};

declare function fn<TArguments: $ReadOnlyArray<*>, TReturn>(
  implementation?: (...args: TArguments) => TReturn
): MockFn<TArguments, TReturn>;

const Component = fn(({ user }) => <div />);

let RefetchContainer = HOC(Component); // Error, mock is not a Component
<RefetchContainer />;

// This test makes sure that create element issues always point to callers of the
// component instead of the defintion
const C = require("./C");
const View = require("./View");

const _a = <C component={View}></C>;

================================================================================
`;
