// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`call.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

function f(x: any) {
  x();
  const y = x();
}

function g(x: () => any) {
  x();
  const y = x();
}

=====================================output=====================================
// @flow

function f(x: any) {
  x();
  const y = x();
}

function g(x: () => any) {
  x();
  const y = x();
}

================================================================================
`;

exports[`coverage.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

const a1 = 5;
const a2: any = a1 - 2;
const a3 = a2 + 1;

type E  = empty;

type U1 = any | number;
type U2 = number | any;
type U3 = empty | number;
type U4 = number | empty;
type U5 = empty | any;
type U6 = any | empty;
type U7 = number | number;

type I1 = any & number;
type I2 = number & any;
type I3 = empty & number;
type I4 = number & empty;
type I5 = empty & any;
type I6 = any & empty;
type I7 = number & number;

type R = R;

type RU1 = RU1 | any;
type RU2 = RU2 | empty;
type RU3 = any | RU3;
type RU4 = empty | RU4;
type RU5 = RU5;
type RU6 = RU6 | number;
type RU7 = number | RU7;
type RU8 = RU8 | RU8;

type RI1 = RI1 & any;
type RI2 = RI2 & empty;
type RI3 = any & RI3;
type RI4 = empty & RI4;
type RI5 = RI5 & number;
type RI6 = number & RI6;
type RI7 = RI7 & RI7;

=====================================output=====================================
// @flow

const a1 = 5;
const a2: any = a1 - 2;
const a3 = a2 + 1;

type E = empty;

type U1 = any | number;
type U2 = number | any;
type U3 = empty | number;
type U4 = number | empty;
type U5 = empty | any;
type U6 = any | empty;
type U7 = number | number;

type I1 = any & number;
type I2 = number & any;
type I3 = empty & number;
type I4 = number & empty;
type I5 = empty & any;
type I6 = any & empty;
type I7 = number & number;

type R = R;

type RU1 = RU1 | any;
type RU2 = RU2 | empty;
type RU3 = any | RU3;
type RU4 = empty | RU4;
type RU5 = RU5;
type RU6 = RU6 | number;
type RU7 = number | RU7;
type RU8 = RU8 | RU8;

type RI1 = RI1 & any;
type RI2 = RI2 & empty;
type RI3 = any & RI3;
type RI4 = empty & RI4;
type RI5 = RI5 & number;
type RI6 = number & RI6;
type RI7 = RI7 & RI7;

================================================================================
`;

exports[`crash.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// This file triggers a violation of the "disjoint-or-nested ranges invariant"
// that we implicitly assume in type-at-pos and coverage implementations. In
// particular, when unchecked it causes a crash with coverage --color.

declare module foo {
}

declare module bar {
}

=====================================output=====================================
// This file triggers a violation of the "disjoint-or-nested ranges invariant"
// that we implicitly assume in type-at-pos and coverage implementations. In
// particular, when unchecked it causes a crash with coverage --color.

declare module foo {
}

declare module bar {
}

================================================================================
`;

exports[`declare_module.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// check coverage of declare module

declare module foo {
}

=====================================output=====================================
// check coverage of declare module

declare module foo {
}

================================================================================
`;

exports[`no_pragma.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
let x = 0;
(x: string);

=====================================output=====================================
let x = 0;
(x: string);

================================================================================
`;

exports[`non-termination.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// This file triggers a violation of the "disjoint-or-nested ranges invariant"
// that we implicitly assume in type-at-pos and coverage implementations. In
// particular, when unchecked it causes non-termination with coverage --color.

declare module foo {
}

declare module bar {
}

declare class qux {
}

=====================================output=====================================
// This file triggers a violation of the "disjoint-or-nested ranges invariant"
// that we implicitly assume in type-at-pos and coverage implementations. In
// particular, when unchecked it causes non-termination with coverage --color.

declare module foo {
}

declare module bar {
}

declare class qux {}

================================================================================
`;

exports[`trust.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow

type N = number; // untrusted
type T = $Trusted<number>; // trusted
type TE = $Trusted<empty>; // empty
type E = empty; // empty
type A = any; // any

type U1 = N | T; // untrusted
type U2 = E | T; // untrusted
type U3 = A | T; // any
type U4 = E | N; // untrusted
type U5 = A | N; // any
type U6 = TE | E; // empty
type U7 = TE | T; // trusted
type U8 = TE | A; // any
type U9 = TE | N; // untrusted

type I1 = N & T; // trusted
type I2 = E & T; // empty
type I3 = A & T; // any
type I4 = E & N; // untrusted
type I5 = A & N; // any
type I6 = TE & E; // empty
type I7 = TE & T; // empty
type I8 = TE & A; // any
type I9 = TE & N; // empty

type O1 = $Trusted<{x : N}>
type O2 = $Trusted<{x : A}>
type O3 = $Trusted<{x : T}>
type O4 = $Trusted<{x : E}>

declare var o1 : O1;
declare var o2 : O2;
declare var o3 : O3;
declare var o4 : O4;

o1.x;
o2.x;
o3.x;
o4.x;

=====================================output=====================================
//@flow

type N = number; // untrusted
type T = $Trusted<number>; // trusted
type TE = $Trusted<empty>; // empty
type E = empty; // empty
type A = any; // any

type U1 = N | T; // untrusted
type U2 = E | T; // untrusted
type U3 = A | T; // any
type U4 = E | N; // untrusted
type U5 = A | N; // any
type U6 = TE | E; // empty
type U7 = TE | T; // trusted
type U8 = TE | A; // any
type U9 = TE | N; // untrusted

type I1 = N & T; // trusted
type I2 = E & T; // empty
type I3 = A & T; // any
type I4 = E & N; // untrusted
type I5 = A & N; // any
type I6 = TE & E; // empty
type I7 = TE & T; // empty
type I8 = TE & A; // any
type I9 = TE & N; // empty

type O1 = $Trusted<{ x: N }>;
type O2 = $Trusted<{ x: A }>;
type O3 = $Trusted<{ x: T }>;
type O4 = $Trusted<{ x: E }>;

declare var o1: O1;
declare var o2: O2;
declare var o3: O3;
declare var o4: O4;

o1.x;
o2.x;
o3.x;
o4.x;

================================================================================
`;

exports[`unicode.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

(null: any);

const emoji = "ðŸ’©"; (null: any);

(null: any);

=====================================output=====================================
// @flow

(null: any);

const emoji = "ðŸ’©";
(null: any);

(null: any);

================================================================================
`;
