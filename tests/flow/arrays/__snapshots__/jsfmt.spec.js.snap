// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Arrays.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================

/* @providesModule Arrays */

function foo(x:string) { }

var a = [];
a[0] = 1;
a[1] = "...";

foo(a[1]);
var y;
a.forEach(x => y=x);

// for literals, composite element type is union of individuals
// note: test both tuple and non-tuple inferred literals
var alittle: Array<?number> = [0, 1, 2, 3, null];
var abig: Array<?number> = [0, 1, 2, 3, 4, 5, 6, 8, null];

var abig2: Array<{x:number; y:number}> = [
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0},
  {x:0, y:0, a:true},
  {x:0, y:0, b:"hey"},
  {x:0, y:0, c:1},
  {x:0, y:0, c:"hey"}
];

module.exports = "arrays";

=====================================output=====================================
/* @providesModule Arrays */

function foo(x: string) {}

var a = [];
a[0] = 1;
a[1] = "...";

foo(a[1]);
var y;
a.forEach((x) => (y = x));

// for literals, composite element type is union of individuals
// note: test both tuple and non-tuple inferred literals
var alittle: Array<?number> = [0, 1, 2, 3, null];
var abig: Array<?number> = [0, 1, 2, 3, 4, 5, 6, 8, null];

var abig2: Array<{ x: number, y: number }> = [
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0, a: true },
  { x: 0, y: 0, b: "hey" },
  { x: 0, y: 0, c: 1 },
  { x: 0, y: 0, c: "hey" },
];

module.exports = "arrays";

================================================================================
`;

exports[`isarray.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
function hmm<Z>(array: Z) {
  if (Array.isArray(array)) {
    const problem: Array<Z> = array; // error
  }
}

function coerce<T, U>(t: T): U {
  function hmm<Z>(array: Z): Z  {
    if (!Array.isArray(array)) throw new Error("Unreachable.");
    const problem: Array<Z> = array; // error
    if (array.length === 0) throw new Error("Unreachable.");
    return problem[0];
  }
  const result: Array<{ value: T }> = hmm([{ value: t }]);
  if (Array.isArray(result)) throw new Error("Unreachable.");
  return ((result: empty).value: U);
}
const twelve: number = coerce("twelve");
twelve.toFixed();

function hmm(array: mixed) {
  if (Array.isArray(array)) {
    const problem: Array<mixed> = array; // error
    problem[1] = 0;
  }
}

=====================================output=====================================
// @flow
function hmm<Z>(array: Z) {
  if (Array.isArray(array)) {
    const problem: Array<Z> = array; // error
  }
}

function coerce<T, U>(t: T): U {
  function hmm<Z>(array: Z): Z {
    if (!Array.isArray(array)) throw new Error("Unreachable.");
    const problem: Array<Z> = array; // error
    if (array.length === 0) throw new Error("Unreachable.");
    return problem[0];
  }
  const result: Array<{ value: T }> = hmm([{ value: t }]);
  if (Array.isArray(result)) throw new Error("Unreachable.");
  return ((result: empty).value: U);
}
const twelve: number = coerce("twelve");
twelve.toFixed();

function hmm(array: mixed) {
  if (Array.isArray(array)) {
    const problem: Array<mixed> = array; // error
    problem[1] = 0;
  }
}

================================================================================
`;

exports[`numeric_elem.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var arr = [];
var day = new Date;

// Date instances are numeric (see Flow_js.numeric) and thus can index into
// arrays.
arr[day] = 0;
(arr[day]: string); // error: number ~> string

=====================================output=====================================
var arr = [];
var day = new Date();

// Date instances are numeric (see Flow_js.numeric) and thus can index into
// arrays.
arr[day] = 0;
(arr[day]: string); // error: number ~> string

================================================================================
`;

exports[`predicates.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
declare function foo(x : number) : boolean;

[1,2,3].filter(foo);

=====================================output=====================================
// @flow
declare function foo(x: number): boolean;

[1, 2, 3].filter(foo);

================================================================================
`;

exports[`spread.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare function foo<TArguments: $ReadOnlyArray<{foo: 'a'}>, TReturn>(
    implementation?: (...args: TArguments) => TReturn,
  ): (...args: TArguments) => TReturn

type Config<Return> = {|
  +control:  () => {foo: 'a'},
  +areEqual: (control: Return, test: Return) => boolean,
|};

declare function bar(config: Config<{foo: 'a'}>) : void

bar({
  control: () => ({foo: 'a'}),
  areEqual : foo((control, test) => control.foo === test.foo),
});

let x = [3, 4];
let y = [3, "a"];
let z = ["a"];

([...x][0] : 3);
([...x][1] : 4);
([...x, ...z][0] : 3);
([...x, ...z][1] : 4);
([...x, ...z][2] : "a");
([...x, ...y][0] : 3);
([...x, ...y][1] : 4);
([...x, ...y][2] : 3);
([...x, ...y][3] : "a");
([...x, ...y, ...z][0] : 3);
([...x, ...y, ...z][1] : 4);
([...x, ...y, ...z][2] : 3);
([...x, ...y, ...z][3] : "a");
([...x, ...y, ...z][4] : "a");

([...z, ...z][0] : "a");
([...z, ...z][1] : "a");

([...x, ...[3, 4]][0] : 3);
([...x, ...[3, 4]][1] : 4);

([...x, ...x][0] : 3); // error
([...x, ...x][1] : 4); // error

([...x, ...x, ...y][0] : 3); // error
([...x, ...x, ...y][1] : 4); // error
([...x, ...x, 1][0] : 3); // error

let three = 3;
let a = [three, three];
let b = [three, 4];
([...a, ...b][0] : 3);
([...a, ...b][1] : 3);
([...a, ...b][2] : 3);
([...a, ...b][3] : 4);

declare function makeTvar<T>(): T;

let t = makeTvar();
let ts: [1,2,3,4] = [...[t, t, t, t]];

let t2s: [1,2,3,4] = [...[t, t, t]]; // error tuple is only 3 long

function foo(a: [1,2,3], b: [4,5,6]): [1,2,3,4,5,6] {
  return [...a, ...b];
}

function bar(a: [1,2,3], b: [4,5,6]): [1,2,3,1,2,3] {
  return [...a, ...a];
}

=====================================output=====================================
// @flow

declare function foo<TArguments: $ReadOnlyArray<{ foo: "a" }>, TReturn>(
  implementation?: (...args: TArguments) => TReturn
): (...args: TArguments) => TReturn;

type Config<Return> = {|
  +control: () => { foo: "a" },
  +areEqual: (control: Return, test: Return) => boolean,
|};

declare function bar(config: Config<{ foo: "a" }>): void;

bar({
  control: () => ({ foo: "a" }),
  areEqual: foo((control, test) => control.foo === test.foo),
});

let x = [3, 4];
let y = [3, "a"];
let z = ["a"];

([...x][0]: 3);
([...x][1]: 4);
([...x, ...z][0]: 3);
([...x, ...z][1]: 4);
([...x, ...z][2]: "a");
([...x, ...y][0]: 3);
([...x, ...y][1]: 4);
([...x, ...y][2]: 3);
([...x, ...y][3]: "a");
([...x, ...y, ...z][0]: 3);
([...x, ...y, ...z][1]: 4);
([...x, ...y, ...z][2]: 3);
([...x, ...y, ...z][3]: "a");
([...x, ...y, ...z][4]: "a");

([...z, ...z][0]: "a");
([...z, ...z][1]: "a");

([...x, ...[3, 4]][0]: 3);
([...x, ...[3, 4]][1]: 4);

([...x, ...x][0]: 3); // error
([...x, ...x][1]: 4); // error

([...x, ...x, ...y][0]: 3); // error
([...x, ...x, ...y][1]: 4); // error
([...x, ...x, 1][0]: 3); // error

let three = 3;
let a = [three, three];
let b = [three, 4];
([...a, ...b][0]: 3);
([...a, ...b][1]: 3);
([...a, ...b][2]: 3);
([...a, ...b][3]: 4);

declare function makeTvar<T>(): T;

let t = makeTvar();
let ts: [1, 2, 3, 4] = [...[t, t, t, t]];

let t2s: [1, 2, 3, 4] = [...[t, t, t]]; // error tuple is only 3 long

function foo(a: [1, 2, 3], b: [4, 5, 6]): [1, 2, 3, 4, 5, 6] {
  return [...a, ...b];
}

function bar(a: [1, 2, 3], b: [4, 5, 6]): [1, 2, 3, 1, 2, 3] {
  return [...a, ...a];
}

================================================================================
`;

exports[`spread_perf.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow strict

// this file should not time out

declare function useState<S>(initialState: S): [S, (S) => void];

const [array, update] = useState([]);

const add1 = x => update([...array, x]);
const add2 = x => update([...array, x]);
update([...array]);
update([...array]);

=====================================output=====================================
// @flow strict

// this file should not time out

declare function useState<S>(initialState: S): [S, (S) => void];

const [array, update] = useState([]);

const add1 = (x) => update([...array, x]);
const add2 = (x) => update([...array, x]);
update([...array]);
update([...array]);

================================================================================
`;
