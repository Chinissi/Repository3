// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`object_keys.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow


// Object.keys.map gives the arguments to map two lower bounds-- the keys of the object
// AND any, due to any propagation. Since we only error on multiple string literal object keys,
// we should expect an object with two keys to fail to construct an object from the computed keys
// but an object with only one key to pass.


const x = {foo: 3};
Object.keys(x).map(k => { return {[k]: k} }); // No error

const y = {foo: 3, bar: 3};
Object.keys(y).map(k => { return {[k]: k} }); // Error

=====================================output=====================================
//@flow

// Object.keys.map gives the arguments to map two lower bounds-- the keys of the object
// AND any, due to any propagation. Since we only error on multiple string literal object keys,
// we should expect an object with two keys to fail to construct an object from the computed keys
// but an object with only one key to pass.

const x = { foo: 3 };
Object.keys(x).map((k) => {
  return { [k]: k };
}); // No error

const y = { foo: 3, bar: 3 };
Object.keys(y).map((k) => {
  return { [k]: k };
}); // Error

================================================================================
`;

exports[`poly.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow

function f1<T: string>(x: T) { return {[x]: x} } // ok
function f2<T>(x: T) { return {[x]: x} } // error. mixed can't be used as a computed prop

=====================================output=====================================
//@flow

function f1<T: string>(x: T) {
  return { [x]: x };
} // ok
function f2<T>(x: T) {
  return { [x]: x };
} // error. mixed can't be used as a computed prop

================================================================================
`;

exports[`test.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var ColorId = {
  RED: 'R',
  GREEN: 'G',
  BLUE: 'B',
};

var ColorNumber = {
  RED: 'ff0000',
  GREEN: '00ff00',
  BLUE: '0000ff',
};

var ColorIdToNumber = {
  [ColorId.RED]: ColorNumber.RED,
  [ColorId.GREEN]: ColorNumber.GREEN,
  [ColorId.BLUE]: ColorNumber.BLUE,
};

(ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops

ColorIdToNumber.XXX; // oops

module.exports = { ColorId, ColorNumber };

=====================================output=====================================
var ColorId = {
  RED: "R",
  GREEN: "G",
  BLUE: "B",
};

var ColorNumber = {
  RED: "ff0000",
  GREEN: "00ff00",
  BLUE: "0000ff",
};

var ColorIdToNumber = {
  [ColorId.RED]: ColorNumber.RED,
  [ColorId.GREEN]: ColorNumber.GREEN,
  [ColorId.BLUE]: ColorNumber.BLUE,
};

(ColorIdToNumber[ColorId.RED]: "ffffff"); // oops

ColorIdToNumber.XXX; // oops

module.exports = { ColorId, ColorNumber };

================================================================================
`;

exports[`test2.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var { ColorId, ColorNumber } = require('./test');
var ColorIdToNumber = {
  [ColorId.RED]: ColorNumber.RED,
  [ColorId.GREEN]: ColorNumber.GREEN,
  [ColorId.BLUE]: ColorNumber.BLUE,
};

(ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops

module.exports = ColorIdToNumber;

=====================================output=====================================
var { ColorId, ColorNumber } = require("./test");
var ColorIdToNumber = {
  [ColorId.RED]: ColorNumber.RED,
  [ColorId.GREEN]: ColorNumber.GREEN,
  [ColorId.BLUE]: ColorNumber.BLUE,
};

(ColorIdToNumber[ColorId.GREEN]: "ffffff"); // oops

module.exports = ColorIdToNumber;

================================================================================
`;

exports[`test3.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var { ColorId } = require('./test');
var ColorIdToNumber = require('./test2');

(ColorIdToNumber[ColorId.BLUE]: 'ffffff'); // oops

=====================================output=====================================
var { ColorId } = require("./test");
var ColorIdToNumber = require("./test2");

(ColorIdToNumber[ColorId.BLUE]: "ffffff"); // oops

================================================================================
`;

exports[`test4.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
module.exports = 'hello';

=====================================output=====================================
module.exports = "hello";

================================================================================
`;

exports[`test5.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var hello = require('./test4');
var dummy = require('./test');
module.exports = {
  ...dummy,
  [hello]: 'world',
  ...dummy,
};

=====================================output=====================================
var hello = require("./test4");
var dummy = require("./test");
module.exports = {
  ...dummy,
  [hello]: "world",
  ...dummy,
};

================================================================================
`;

exports[`test6.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var o = require('./test5');
(o.hello: 'nothing'); // oops

=====================================output=====================================
var o = require("./test5");
(o.hello: "nothing"); // oops

================================================================================
`;

exports[`test7.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var obj = {x: 0, m() { return this.x }}
var x: string = obj['m'](); // error, number ~> string

var arr = [function() { return this.length }];
var y: string = arr[0](); // error: number ~> string

=====================================output=====================================
var obj = {
  x: 0,
  m() {
    return this.x;
  },
};
var x: string = obj["m"](); // error, number ~> string

var arr = [
  function () {
    return this.length;
  },
];
var y: string = arr[0](); // error: number ~> string

================================================================================
`;

exports[`union.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow
type key = 'a' | 'b' | 'c';

declare var k: key;
const a = {[k]: 3}; // Error, k has multiple lower bounds


let x;
if (true) {
  x = 'foo';
} else if (true) {
  x = 'bar';
} else {
  x = 'baz';
}

const b = {[x]: 3} // Error, x has multiple lower bounds

=====================================output=====================================
//@flow
type key = "a" | "b" | "c";

declare var k: key;
const a = { [k]: 3 }; // Error, k has multiple lower bounds

let x;
if (true) {
  x = "foo";
} else if (true) {
  x = "bar";
} else {
  x = "baz";
}

const b = { [x]: 3 }; // Error, x has multiple lower bounds

================================================================================
`;
