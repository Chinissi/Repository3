// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`importtest.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
import * as Test from './test';
import type {ID} from './test';

opaque type ID2 = number;

(3 : ID); // Error: number ~> ID

function bad1(x: number) : ID { // Error: number ~> ID
    return x;
}

function bad2(x: ID) : ID {
    return Test.hide(x); // Error: ID ~> number
}

function bad3(x: ID) : ID2 {
    return x; // Error: ID ~> ID2
}

function bad4(x: ID2) : ID { // Error: ID2 ~> ID
    return x;
}

=====================================output=====================================
// @flow
import * as Test from "./test";
import type { ID } from "./test";

opaque type ID2 = number;

(3: ID); // Error: number ~> ID

function bad1(x: number): ID {
  // Error: number ~> ID
  return x;
}

function bad2(x: ID): ID {
  return Test.hide(x); // Error: ID ~> number
}

function bad3(x: ID): ID2 {
  return x; // Error: ID ~> ID2
}

function bad4(x: ID2): ID {
  // Error: ID2 ~> ID
  return x;
}

================================================================================
`;

exports[`test.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
export opaque type ID = number;

export function addition(x: ID, y: ID) : ID {
    return x + y;
}

export function expose(x: ID) : number {
    return x;
}

export function hide(x: number) : ID {
    return x;
}

opaque type MyNum = number;
("hello": MyNum) // Error: string ~> number

=====================================output=====================================
// @flow
export opaque type ID = number;

export function addition(x: ID, y: ID): ID {
  return x + y;
}

export function expose(x: ID): number {
  return x;
}

export function hide(x: number): ID {
  return x;
}

opaque type MyNum = number;
("hello": MyNum); // Error: string ~> number

================================================================================
`;
