// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`intersection.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
declare var any: any;

class A {}
class B {}
class C {}

((any: {a: A} & {b: B}): $Diff<{a: A, b: B}, {b: B}>); // OK
((any: {a: A} & {c: C}): $Diff<{a: A, b: B}, {b: B}>); // OK
((any: {c: C} & {b: B}): $Diff<{a: A, b: B}, {b: B}>); // Error
((any: {a: A, b: B}): $Diff<{a: A} & {b: B}, {b: B}>); // OK
((any: {a: A}): $Diff<{a: A} & {b: B}, {b: B}>); // OK
((any: {b: B}): $Diff<{a: A} & {b: B}, {b: B}>); // Error
((any: {a: A}): $Diff<{a: A, b: B, c: C}, {b: B} & {c: C}>); // OK
((any: {b: B}): $Diff<{a: A, b: B, c: C}, {b: B} & {c: C}>); // Error

=====================================output=====================================
declare var any: any;

class A {}
class B {}
class C {}

((any: { a: A } & { b: B }): $Diff<{ a: A, b: B }, { b: B }>); // OK
((any: { a: A } & { c: C }): $Diff<{ a: A, b: B }, { b: B }>); // OK
((any: { c: C } & { b: B }): $Diff<{ a: A, b: B }, { b: B }>); // Error
((any: { a: A, b: B }): $Diff<{ a: A } & { b: B }, { b: B }>); // OK
((any: { a: A }): $Diff<{ a: A } & { b: B }, { b: B }>); // OK
((any: { b: B }): $Diff<{ a: A } & { b: B }, { b: B }>); // Error
((any: { a: A }): $Diff<{ a: A, b: B, c: C }, { b: B } & { c: C }>); // OK
((any: { b: B }): $Diff<{ a: A, b: B, c: C }, { b: B } & { c: C }>); // Error

================================================================================
`;

exports[`lower.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

type Person = {
  name: string,
  age: number,
  height: {
    feet: number,
    inches: number,
  },
};

type Aged = {
  age: number,
};

type PersonWithoutAgeActual = $Diff<Person, Aged>;

declare var y: PersonWithoutAgeActual;

// ERRORS:
(y.age: number); // Error -- could be void
(y.name: number); // Error -- should be string
y.bla; // Error -- key not found.

=====================================output=====================================
// @flow

type Person = {
  name: string,
  age: number,
  height: {
    feet: number,
    inches: number,
  },
};

type Aged = {
  age: number,
};

type PersonWithoutAgeActual = $Diff<Person, Aged>;

declare var y: PersonWithoutAgeActual;

// ERRORS:
(y.age: number); // Error -- could be void
(y.name: number); // Error -- should be string
y.bla; // Error -- key not found.

================================================================================
`;

exports[`undefined.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
declare var any: any;

class A {}
class B {}

((any: {a: A, b: B}): $Diff<{a: A, b: B}, {b: B}>); // OK
((any: {a: A}): $Diff<{a: A, b: B}, {b: B}>); // OK
((any: {b: B}): $Diff<{a: A, b: B}, {b: B}>); // Error
((any: {a: A, b: void}): $Diff<{a: A, b: B}, {b: B}>); // OK
((any: {a: void, b: B}): $Diff<{a: A, b: B}, {b: B}>); // Error

=====================================output=====================================
declare var any: any;

class A {}
class B {}

((any: { a: A, b: B }): $Diff<{ a: A, b: B }, { b: B }>); // OK
((any: { a: A }): $Diff<{ a: A, b: B }, { b: B }>); // OK
((any: { b: B }): $Diff<{ a: A, b: B }, { b: B }>); // Error
((any: { a: A, b: void }): $Diff<{ a: A, b: B }, { b: B }>); // OK
((any: { a: void, b: B }): $Diff<{ a: A, b: B }, { b: B }>); // Error

================================================================================
`;

exports[`union.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A {}
class B {}
class C {}
class D {}

declare var one : $Diff<{a: A} | {b: B}, {b: B}>;
(one : {}); //error

declare var two : $Diff<{a: A, b : B} | {b: B}, {b: B}>;
(two :  {a : A} | {});
(two :  {});
(two :  {a : A}); // error
(two :  {a : A, b : B} | {});

declare var three : {a : A, b : B} | {};
(three : typeof two); // TODO: should be an error

declare var four : $Diff<{a: A, b: B, c: C}, {a: A} | {b: B}>;
(four : {a: A, c: C} | {b: B, c: C});
(four : {a : A, c : C}); //error
(four : {a : A, b : C, c : C}); //error
(four : {c : C});

declare var five : $Diff<{a: A, c : C} | {b: B, c : C}, {a : A} | {b: B}>;
(five : {c : C}); //error


declare var six : $Diff<{a: A, b : B, c : C} | {a : A, b: B, d : D}, {a : A} | {b: B}>;
(six : {c : C} | {d : D});
(six : {c : C, d : D}); // error
(six : {});

=====================================output=====================================
class A {}
class B {}
class C {}
class D {}

declare var one: $Diff<{ a: A } | { b: B }, { b: B }>;
(one: {}); //error

declare var two: $Diff<{ a: A, b: B } | { b: B }, { b: B }>;
(two: { a: A } | {});
(two: {});
(two: { a: A }); // error
(two: { a: A, b: B } | {});

declare var three: { a: A, b: B } | {};
(three: typeof two); // TODO: should be an error

declare var four: $Diff<{ a: A, b: B, c: C }, { a: A } | { b: B }>;
(four: { a: A, c: C } | { b: B, c: C });
(four: { a: A, c: C }); //error
(four: { a: A, b: C, c: C }); //error
(four: { c: C });

declare var five: $Diff<{ a: A, c: C } | { b: B, c: C }, { a: A } | { b: B }>;
(five: { c: C }); //error

declare var six: $Diff<
  { a: A, b: B, c: C } | { a: A, b: B, d: D },
  { a: A } | { b: B }
>;
(six: { c: C } | { d: D });
(six: { c: C, d: D }); // error
(six: {});

================================================================================
`;
