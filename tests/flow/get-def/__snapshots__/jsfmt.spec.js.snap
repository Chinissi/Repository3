// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

class Foo {
  prop: ?string;
  #privateProp: number;
  fun(): void {
    this.#privateProp;
    this.#privateProp = 4;
  }
}

const foo = new Foo();
foo.prop;
foo.prop = null;
foo.fun();

if (foo.prop != null) {
  foo.prop;
}

function f(x: ?Foo): void {
  x.fun();
}

function f(x: Foo | null | void): void {
  x.fun();
}

=====================================output=====================================
// @flow

class Foo {
  prop: ?string;
  #privateProp: number;
  fun(): void {
    this.#privateProp;
    this.#privateProp = 4;
  }
}

const foo = new Foo();
foo.prop;
foo.prop = null;
foo.fun();

if (foo.prop != null) {
  foo.prop;
}

function f(x: ?Foo): void {
  x.fun();
}

function f(x: Foo | null | void): void {
  x.fun();
}

================================================================================
`;

exports[`const.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

const foo = 123;

{
  const foo = 'abc';
  foo;
}

foo;

=====================================output=====================================
// @flow

const foo = 123;

{
  const foo = "abc";
  foo;
}

foo;

================================================================================
`;

exports[`destructuring.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

{
  let foo = { bar: 123 };
  let {bar: baz} = foo;
}

=====================================output=====================================
// @flow

{
  let foo = { bar: 123 };
  let { bar: baz } = foo;
}

================================================================================
`;

exports[`example.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

var lib = require('./library');

function add(a: number, b: number): number {
  return a + b;
}

var re = /^keynote (talk){2} (lightning){3,5} (talk){2} closing partytime!!!/

// t123456
add(lib.iTakeAString(42), 7);

// D123456
lib.bar();

=====================================output=====================================
/* @flow */

var lib = require("./library");

function add(a: number, b: number): number {
  return a + b;
}

var re = /^keynote (talk){2} (lightning){3,5} (talk){2} closing partytime!!!/;

// t123456
add(lib.iTakeAString(42), 7);

// D123456
lib.bar();

================================================================================
`;

exports[`global.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

Array;

=====================================output=====================================
// @flow

Array;

================================================================================
`;

exports[`idx.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

declare var idx: $Facebookism$Idx;

type Foo = {
  foo: ?{
    bar: string,
  }
};

function foo(x: ?Foo): ?string {
  return idx(x, _ => _.foo.bar);
}

=====================================output=====================================
// @flow

declare var idx: $Facebookism$Idx;

type Foo = {
  foo: ?{
    bar: string,
  },
};

function foo(x: ?Foo): ?string {
  return idx(x, (_) => _.foo.bar);
}

================================================================================
`;

exports[`imports.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import thing from "./helpers/exports_default.js";
thing;

import {foo, bar as baz, letBinding, varBinding, fun, Cls} from "./helpers/exports_named.js";
foo;
baz;

import * as things from "./helpers/exports_named.js";
things;

// $FlowFixMe
import type {DoesNotExist} from "./doesNotExist";
const x: DoesNotExist<number> = "foo";
x.foo();

type Foo = any;
// $FlowFixMe
const y: Foo<number> = "foo";
// $FlowFixMe
y.foo();

=====================================output=====================================
// @flow

import thing from "./helpers/exports_default.js";
thing;

import {
  foo,
  bar as baz,
  letBinding,
  varBinding,
  fun,
  Cls,
} from "./helpers/exports_named.js";
foo;
baz;

import * as things from "./helpers/exports_named.js";
things;

// $FlowFixMe
import type { DoesNotExist } from "./doesNotExist";
const x: DoesNotExist<number> = "foo";
x.foo();

type Foo = any;
// $FlowFixMe
const y: Foo<number> = "foo";
// $FlowFixMe
y.foo();

================================================================================
`;

exports[`let.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

let foo = 123;

{
  let foo = 'abc';
  foo;
}

foo;

let bar;
if (true) {
  bar = 1;
} else {
  bar = 2;
}
bar;


let x;
x = 123;
x;

{
  let val = 'foo';
  let obj = { foo: val };
  let foo = obj.foo;
}

=====================================output=====================================
// @flow

let foo = 123;

{
  let foo = "abc";
  foo;
}

foo;

let bar;
if (true) {
  bar = 1;
} else {
  bar = 2;
}
bar;

let x;
x = 123;
x;

{
  let val = "foo";
  let obj = { foo: val };
  let foo = obj.foo;
}

================================================================================
`;

exports[`library.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

module.exports = {

  iTakeAString: function(name: string): number {
    return 42;
  },

  bar: function(): number {
    return 42;
  },

};

=====================================output=====================================
/* @flow */

module.exports = {
  iTakeAString: function (name: string): number {
    return 42;
  },

  bar: function (): number {
    return 42;
  },
};

================================================================================
`;

exports[`objects.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

type Foo = {foo: string};
const a: Foo = {foo: ''};
a.foo;

const b = {foo: ''};
b.foo;

const c = {};
c.foo = '';
c.foo;
c.baz;
c.baz = '';
c.bar;
c.bar;

{
  const {foo} = a;
  const {foo: bar} = a;
};
{ const {foo} = b; }
{ const {foo} = c; }
{ const [foo] = a; }
{ const foo = a.foo; }

=====================================output=====================================
/* @flow */

type Foo = { foo: string };
const a: Foo = { foo: "" };
a.foo;

const b = { foo: "" };
b.foo;

const c = {};
c.foo = "";
c.foo;
c.baz;
c.baz = "";
c.bar;
c.bar;

{
  const { foo } = a;
  const { foo: bar } = a;
}
{
  const { foo } = b;
}
{
  const { foo } = c;
}
{
  const [foo] = a;
}
{
  const foo = a.foo;
}

================================================================================
`;

exports[`optional_chaining.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

type Foo = {
  bar: {
    baz: number
  }
}

const foo: ?Foo = {
  bar: {
    baz: 42
  }
}

const foo2: ?Foo = null;

foo?.bar.baz;
foo2?.bar.baz;

=====================================output=====================================
// @flow

type Foo = {
  bar: {
    baz: number,
  },
};

const foo: ?Foo = {
  bar: {
    baz: 42,
  },
};

const foo2: ?Foo = null;

foo?.bar.baz;
foo2?.bar.baz;

================================================================================
`;
