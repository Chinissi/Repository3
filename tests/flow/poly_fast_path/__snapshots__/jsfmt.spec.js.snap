// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`a.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

const bar = require('./b.js');

// Checked naively, we will compute two different types for Bar in the
// merge and check phases of Flow, and so will not hit the polyt -> polyt fast
// path when checking. This regression test ensures that whatever scheme we
// use to assign ids to polymorphic types assigns Bar the same id in both
// merge and check, rather than computing a new one unnecessarily each time.

export type Bar= <T>(x: T) => T;

(bar: Bar);

=====================================output=====================================
// @flow

const bar = require("./b.js");

// Checked naively, we will compute two different types for Bar in the
// merge and check phases of Flow, and so will not hit the polyt -> polyt fast
// path when checking. This regression test ensures that whatever scheme we
// use to assign ids to polymorphic types assigns Bar the same id in both
// merge and check, rather than computing a new one unnecessarily each time.

export type Bar = <T>(x: T) => T;

(bar: Bar);

================================================================================
`;

exports[`b.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

import type {Bar} from './a.js';

declare var bar: Bar;

module.exports = bar;

=====================================output=====================================
// @flow

import type { Bar } from "./a.js";

declare var bar: Bar;

module.exports = bar;

================================================================================
`;
