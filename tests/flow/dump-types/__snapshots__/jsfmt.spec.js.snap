// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`import.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
var num = 42;
function bar() { }
bar();
module.exports = num;

=====================================output=====================================
// @flow
var num = 42;
function bar() {}
bar();
module.exports = num;

================================================================================
`;

exports[`predicates.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

let y = { FOO: 'foo' };
if (y.FOO) {}
if (y.FOO == '') {}
if (y.FOO === '') {}
if (y.FOO == null) {}
if (y.FOO == undefined) {}
if (Array.isArray(y.FOO)) {}

=====================================output=====================================
// @flow

let y = { FOO: "foo" };
if (y.FOO) {
}
if (y.FOO == "") {
}
if (y.FOO === "") {
}
if (y.FOO == null) {
}
if (y.FOO == undefined) {
}
if (Array.isArray(y.FOO)) {
}

================================================================================
`;

exports[`test.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
var num = require('./import');
function foo(x) { }
foo(0);
var a:string = num;

function unannotated(x) {
  return x;
}

// test deduping of inferred types
const nullToUndefined = val => val === null ? undefined : val;

function f0(x: ?Object) { return nullToUndefined(x); }
function f1(x: ?Object) { return nullToUndefined(x); }
function f2(x: ?string) { return nullToUndefined(x); }
function f3(x: ?string) { return nullToUndefined(x); }

declare var idx: $Facebookism$Idx;
declare var obj: {a?: {b: ?{c: null | {d: number}}}};
const idxResult = idx(obj, obj => obj.a.b.c.d);

=====================================output=====================================
// @flow
var num = require("./import");
function foo(x) {}
foo(0);
var a: string = num;

function unannotated(x) {
  return x;
}

// test deduping of inferred types
const nullToUndefined = (val) => (val === null ? undefined : val);

function f0(x: ?Object) {
  return nullToUndefined(x);
}
function f1(x: ?Object) {
  return nullToUndefined(x);
}
function f2(x: ?string) {
  return nullToUndefined(x);
}
function f3(x: ?string) {
  return nullToUndefined(x);
}

declare var idx: $Facebookism$Idx;
declare var obj: { a?: { b: ?{ c: null | { d: number } } } };
const idxResult = idx(obj, (obj) => obj.a.b.c.d);

================================================================================
`;

exports[`type-destructors.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

type T<X> = $Shape<{ f: X }>;

type Props = { name: string, age: number };
type DefaultProps = { age: number };
declare var diff: $Diff<Props, DefaultProps>;
diff.name; // this is required for the type to actually be evaluated

=====================================output=====================================
// @flow

type T<X> = $Shape<{ f: X }>;

type Props = { name: string, age: number };
type DefaultProps = { age: number };
declare var diff: $Diff<Props, DefaultProps>;
diff.name; // this is required for the type to actually be evaluated

================================================================================
`;
