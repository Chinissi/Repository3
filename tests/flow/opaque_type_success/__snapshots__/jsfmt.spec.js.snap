// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bar.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
import foo from "./foo";
opaque type T = number;
export function f(x: T) : number {
  return foo(x); // should be OK
}

=====================================output=====================================
// @flow
import foo from "./foo";
opaque type T = number;
export function f(x: T): number {
  return foo(x); // should be OK
}

================================================================================
`;

exports[`foo.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
export default <T>(x: T): T => x

=====================================output=====================================
// @flow
export default <T>(x: T): T => x;

================================================================================
`;

exports[`test.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
export opaque type ID = number;

export function addition(x: ID, y: ID) : ID {
    return x + y;
}

export function expose(x: ID) : number {
    return x;
}

export function hide(x: number) : ID {
    return x;
}

export type num = number;
export opaque type onum = num;

export function mult(x: onum, y: num) : num {
    return x * y;
}

export function omult(x: onum, y: num) : onum {
    return x * y;
}

opaque type A = number;
opaque type B = number;

function convert(x: A) : B {
    return x;
}

export type TransparentMyNum = number;

exports.hide = hide;

=====================================output=====================================
// @flow
export opaque type ID = number;

export function addition(x: ID, y: ID): ID {
  return x + y;
}

export function expose(x: ID): number {
  return x;
}

export function hide(x: number): ID {
  return x;
}

export type num = number;
export opaque type onum = num;

export function mult(x: onum, y: num): num {
  return x * y;
}

export function omult(x: onum, y: num): onum {
  return x * y;
}

opaque type A = number;
opaque type B = number;

function convert(x: A): B {
  return x;
}

export type TransparentMyNum = number;

exports.hide = hide;

================================================================================
`;

exports[`testimport.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow
//
import * as Test from './test';
import {hide, type ID, type TransparentMyNum} from './test';

var hideCJS = require('./test').hide;

function subtraction(x: ID, y: ID) : ID {
    return Test.addition(x,y);
}

function castTo(x: number) : ID {
    return hide(x);
}

function identity(x: ID) : ID {
    return x;
}

function caseFrom(x : ID) : number {
    return Test.expose(x);
}

function empty(x : empty) : ID {
    return x;
}

function toAny(x : ID) : any {
    return x;
}

type IDT = ID;

function toIDT(x: ID) : IDT {
    return x;
}

function toID(x : IDT) : ID {
    return x;
}

Test.expose(Test.hide(3));

opaque type OpaqueMyNum = number;

function testA(x: TransparentMyNum): OpaqueMyNum { return x; }
function testB(x: OpaqueMyNum): TransparentMyNum { return x; }

export type {OpaqueMyNum};

hideCJS(0);

=====================================output=====================================
// @flow
//
import * as Test from "./test";
import { hide, type ID, type TransparentMyNum } from "./test";

var hideCJS = require("./test").hide;

function subtraction(x: ID, y: ID): ID {
  return Test.addition(x, y);
}

function castTo(x: number): ID {
  return hide(x);
}

function identity(x: ID): ID {
  return x;
}

function caseFrom(x: ID): number {
  return Test.expose(x);
}

function empty(x: empty): ID {
  return x;
}

function toAny(x: ID): any {
  return x;
}

type IDT = ID;

function toIDT(x: ID): IDT {
  return x;
}

function toID(x: IDT): ID {
  return x;
}

Test.expose(Test.hide(3));

opaque type OpaqueMyNum = number;

function testA(x: TransparentMyNum): OpaqueMyNum {
  return x;
}
function testB(x: OpaqueMyNum): TransparentMyNum {
  return x;
}

export type { OpaqueMyNum };

hideCJS(0);

================================================================================
`;
