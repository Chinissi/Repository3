// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`b.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow

type Data = {| x: number |}

declare function foo(data: Data): void;

const o = {
  fun: foo,
}
/*
The error position for this one is bad,
as it points to line 5.
*/
function test1(b: boolean) {
  var data = { x: 0 };
  if (b) data = { z: 0 };
  o['fun'](data);
}
/*The error position for this one is ok.*/
function test2(b: boolean) {
  var data = { z: 0 };
  o['fun'](data);
}

=====================================output=====================================
//@flow

type Data = {| x: number |};

declare function foo(data: Data): void;

const o = {
  fun: foo,
};
/*
The error position for this one is bad,
as it points to line 5.
*/
function test1(b: boolean) {
  var data = { x: 0 };
  if (b) data = { z: 0 };
  o["fun"](data);
}
/*The error position for this one is ok.*/
function test2(b: boolean) {
  var data = { z: 0 };
  o["fun"](data);
}

================================================================================
`;

exports[`test2.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

type T = <A>((A) => mixed) => (A & A);
type fn = (arg: string) => number;
type arg = $Call<T, fn>;
const t: arg = 5;

=====================================output=====================================
// @flow

type T = <A>((A) => mixed) => A & A;
type fn = (arg: string) => number;
type arg = $Call<T, fn>;
const t: arg = 5;

================================================================================
`;
