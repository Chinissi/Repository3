exports[`test break-last-call.js 1`] = `
"export default store => {
  return callApi(endpoint, schema).then(
    response => next(actionWith({
      response,
      type: successType
    })),
    error => next(actionWith({
      type: failureType,
      error: error.message || \'Something bad happened\'
    }))
  )
}

it(\'should group messages with same created time\', () => {
  expect(
    groupMessages(messages).toJS(),
  ).toEqual({
    \'11/01/2017 13:36\': [
      {message: \'test\', messageType: \'SMS\', status: \'Unknown\', created: \'11/01/2017 13:36\'},
      {message: \'test\', messageType: \'Email\', status: \'Unknown\', created: \'11/01/2017 13:36\'},
    ],
    \'09/01/2017 17:25\': [
      {message: \'te\', messageType: \'SMS\', status: \'Unknown\', created: \'09/01/2017 17:25\'},
      {message: \'te\', messageType: \'Email\', status: \'Unknown\', created: \'09/01/2017 17:25\'},
    ],
    \'11/01/2017 13:33\': [
      {message: \'test\', messageType: \'SMS\', status: \'Unknown\', created: \'11/01/2017 13:33\'},
      {message: \'test\', messageType: \'Email\', status: \'Unknown\', created: \'11/01/2017 13:33\'},
    ],
    \'11/01/2017 13:37\': [
      {message: \'test\', messageType: \'SMS\', status: \'Unknown\', created: \'11/01/2017 13:37\'},
      {message: \'test\', messageType: \'Email\', status: \'Unknown\', created: \'11/01/2017 13:37\'},
    ],
  });
});
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export default store => {
  return callApi(endpoint, schema).then(
    response => next(
      actionWith({
        response,
        type: successType
      })
    ),
    error => next(
      actionWith({
        type: failureType,
        error: error.message || \"Something bad happened\"
      })
    )
  );
};

it(\"should group messages with same created time\", () => {
  expect(groupMessages(messages).toJS()).toEqual({
    \"11/01/2017 13:36\": [
      {
        message: \"test\",
        messageType: \"SMS\",
        status: \"Unknown\",
        created: \"11/01/2017 13:36\"
      },
      {
        message: \"test\",
        messageType: \"Email\",
        status: \"Unknown\",
        created: \"11/01/2017 13:36\"
      }
    ],
    \"09/01/2017 17:25\": [
      {
        message: \"te\",
        messageType: \"SMS\",
        status: \"Unknown\",
        created: \"09/01/2017 17:25\"
      },
      {
        message: \"te\",
        messageType: \"Email\",
        status: \"Unknown\",
        created: \"09/01/2017 17:25\"
      }
    ],
    \"11/01/2017 13:33\": [
      {
        message: \"test\",
        messageType: \"SMS\",
        status: \"Unknown\",
        created: \"11/01/2017 13:33\"
      },
      {
        message: \"test\",
        messageType: \"Email\",
        status: \"Unknown\",
        created: \"11/01/2017 13:33\"
      }
    ],
    \"11/01/2017 13:37\": [
      {
        message: \"test\",
        messageType: \"SMS\",
        status: \"Unknown\",
        created: \"11/01/2017 13:37\"
      },
      {
        message: \"test\",
        messageType: \"Email\",
        status: \"Unknown\",
        created: \"11/01/2017 13:37\"
      }
    ]
  });
});
"
`;

exports[`test comment.js 1`] = `
"function f() {
  return observableFromSubscribeFunction()
    // Debounce manually rather than using editor.onDidStopChanging so that the debounce time is
    // configurable.
    .debounceTime(debounceInterval);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function f() {
  return observableFromSubscribeFunction()
    // Debounce manually rather than using editor.onDidStopChanging so that the debounce time is
    // configurable.
    .debounceTime(debounceInterval);
}
"
`;

exports[`test first_long.js 1`] = `
"export default function theFunction(action$, store) {
  return action$.ofType(THE_ACTION).switchMap(action => Observable
    .webSocket({
      url: THE_URL,
      more: stuff(),
      evenMore: stuff({
        value1: true,
        value2: false,
        value3: false
      })
    })
    .filter(data => theFilter(data))
    .map(({ theType, ...data }) => theMap(theType, data))
    .retryWhen(errors => errors));
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export default function theFunction(action$, store) {
  return action$.ofType(THE_ACTION).switchMap(action => Observable
    .webSocket({
      url: THE_URL,
      more: stuff(),
      evenMore: stuff({
        value1: true,
        value2: false,
        value3: false
      })
    })
    .filter(data => theFilter(data))
    .map(({ theType, ...data }) => theMap(theType, data))
    .retryWhen(errors => errors));
}
"
`;

exports[`test multiple-members.js 1`] = `
"if (testConfig.ENABLE_ONLINE_TESTS === \"true\") {
  describe(\"POST /users/me/pet\", function() {
    it(\"saves pet\", function() {
      function assert(pet) {
        expect(pet).to.have.property(\"OwnerAddress\").that.deep.equals({
          AddressLine1: \"Alexanderstrasse\",
          AddressLine2: \"\",
          PostalCode: \"10999\",
          Region: \"Berlin\",
          City: \"Berlin\",
          Country: \"DE\"
        });
      }
    });
  });
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (testConfig.ENABLE_ONLINE_TESTS === \"true\") {
  describe(\"POST /users/me/pet\", function() {
    it(\"saves pet\", function() {
      function assert(pet) {
        expect(pet).to.have.property(\"OwnerAddress\").that.deep.equals({
          AddressLine1: \"Alexanderstrasse\",
          AddressLine2: \"\",
          PostalCode: \"10999\",
          Region: \"Berlin\",
          City: \"Berlin\",
          Country: \"DE\"
        });
      }
    });
  });
}
"
`;

exports[`test test.js 1`] = `
"method().then(x => x)
  [\"abc\"](x => x)
  [abc](x => x);

({}.a().b());
({}).a().b();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method().then(x => x)[\"abc\"](x => x)[abc](x => x);

({}).a().b();
({}).a().b();
"
`;

exports[`test this.js 1`] = `
"const sel = this.connections
  .concat(this.activities.concat(this.operators))
  .filter(x => x.selected);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const sel = this.connections
  .concat(this.activities.concat(this.operators))
  .filter(x => x.selected);
"
`;
