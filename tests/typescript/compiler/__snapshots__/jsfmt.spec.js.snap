// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`badArrayIndex.ts 1`] = `
var results = number[];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
var results = number[];

`;

exports[`functionOverloadsOnGenericArity1.ts 1`] = `
// overloading on arity not allowed
interface C {
   f<T>(): string;
   f<T, U>(): string; 
 
   <T>(): string;
   <T, U>(): string; 
 
  new <T>(): string;
  new <T, U>(): string; 
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// overloading on arity not allowed
interface C {
  f<T>(): string,
  f<T, U>(): string,

  <T>(): string,
  <T, U>(): string,

  new <T>(): string,
  new <T, U>(): string
}

`;

exports[`mappedTypeWithCombinedTypeMappers.ts 1`] = `
// Repro from #13351

type Meta<T, A> = {
    [P in keyof T]: {
        value: T[P];
        also: A;
        readonly children: Meta<T[P], A>;
    };
}

interface Input {
    x: string;
    y: number;
}

declare const output: Meta<Input, boolean>;

const shouldFail: { important: boolean } = output.x.children;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Repro from #13351

type Meta<T, A> = {
  [P in keyof T]: {
    value: T[P],
    also: A,
    readonly children: Meta<T[P], A>
  }
};

interface Input {
  x: string,
  y: number
}

declare const output: Meta<Input, boolean>;

const shouldFail: { important: boolean } = output.x.children;

`;

exports[`modifiersOnInterfaceIndexSignature1.ts 1`] = `
interface I {
  public [a: string]: number;
}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
interface I {
  public [a: string]: number
}

`;
