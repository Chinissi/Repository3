exports[`test inline-object-array.js 1`] = `
"prevState = prevState || {
  catalogs: [],
  loadState: LOADED,
  opened: false,
  searchQuery: \'\',
  selectedCatalog: null,
};

this.steps = steps || [
  {
    name: \'mock-module\',
    path: \'/nux/mock-module\',
  },
];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prevState = prevState || {
  catalogs: [],
  loadState: LOADED,
  opened: false,
  searchQuery: \"\",
  selectedCatalog: null
};

this.steps = steps || [
  {
    name: \"mock-module\",
    path: \"/nux/mock-module\"
  }
];
"
`;

exports[`test short-right.js 1`] = `
"this._cumulativeHeights &&
 Math.abs(
   this._cachedItemHeight(this._firstVisibleIndex + i) -
     this._provider.fastHeight(i + this._firstVisibleIndex),
 ) >
   1

foooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(
  aaaaaaaaaaaaaaaaaaa
) +
  a;

const isPartOfPackageJSON = dependenciesArray.indexOf(
  dependencyWithOutRelativePath.split(\'/\')[0],
) !== -1;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
this._cumulativeHeights &&
  Math.abs(
    this._cachedItemHeight(this._firstVisibleIndex + i) -
      this._provider.fastHeight(i + this._firstVisibleIndex)
  ) > 1;

foooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(
  aaaaaaaaaaaaaaaaaaa
) + a;

const isPartOfPackageJSON = dependenciesArray.indexOf(
  dependencyWithOutRelativePath.split(\"/\")[0]
) !== -1;
"
`;

exports[`test test.js 1`] = `
"// It should always break the highest precedence operators first, and
// break them all at the same time.

const x = longVariable + longVariable + longVariable;
const x = longVariable + longVariable + longVariable + longVariable - longVariable + longVariable;
const x = longVariable + longVariable * longVariable + longVariable - longVariable + longVariable;
const x = longVariable + longVariable * longVariable * longVariable / longVariable + longVariable;

const x = longVariable && longVariable && longVariable && longVariable && longVariable && longVariable;
const x = longVariable && longVariable || longVariable && longVariable || longVariable && longVariable;

const x = longVariable * longint && longVariable >> 0 && longVariable + longVariable;

const x = longVariable > longint && longVariable === 0 + longVariable * longVariable;

foo(obj.property * new Class() && obj instanceof Class && longVariable ? number + 5 : false);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// It should always break the highest precedence operators first, and
// break them all at the same time.

const x = longVariable + longVariable + longVariable;
const x = longVariable +
  longVariable +
  longVariable +
  longVariable -
  longVariable +
  longVariable;
const x = longVariable +
  longVariable * longVariable +
  longVariable -
  longVariable +
  longVariable;
const x = longVariable +
  longVariable * longVariable * longVariable / longVariable +
  longVariable;

const x = longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable;
const x = longVariable && longVariable ||
  longVariable && longVariable ||
  longVariable && longVariable;

const x = longVariable * longint &&
  longVariable >> 0 &&
  longVariable + longVariable;

const x = longVariable > longint &&
  longVariable === 0 + longVariable * longVariable;

foo(
  obj.property * new Class() && obj instanceof Class && longVariable
    ? number + 5
    : false
);
"
`;
