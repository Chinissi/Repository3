// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`complex-deferred.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@defer (when isVisible() && foo; on hover(button), timer(10s), idle, immediate, interaction(button), viewport(container); prefetch on immediate; prefetch when isDataLoaded()) {
    <calendar-cmp [date]="current"/>
}
@loading (minimum 1s; after 100ms) {
    Loading...
}
@placeholder (minimum 500) {
    Placeholder content!
}
@error {
    Loading failed :(
}

=====================================output=====================================
@defer (
  when isVisible() && foo;
  on hover(button), timer(10s), idle, immediate, interaction(button), viewport(container);
  prefetch on immediate;
  prefetch when isDataLoaded()
) {
  <calendar-cmp [date]="current" />
} @loading (minimum 1s; after 100ms) {
  Loading...
} @placeholder (minimum 500) {
  Placeholder content!
} @error {
  Loading failed :(
}

================================================================================
`;

exports[`complex-deferred.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@defer (when isVisible() && foo; on hover(button), timer(10s), idle, immediate, interaction(button), viewport(container); prefetch on immediate; prefetch when isDataLoaded()) {
    <calendar-cmp [date]="current"/>
}
@loading (minimum 1s; after 100ms) {
    Loading...
}
@placeholder (minimum 500) {
    Placeholder content!
}
@error {
    Loading failed :(
}

=====================================output=====================================
@defer (
  when isVisible() && foo;
  on hover(button), timer(10s), idle, immediate, interaction(button), viewport(container);
  prefetch on immediate;
  prefetch when isDataLoaded()
) {
  <calendar-cmp [date]="current" />
} @loading (minimum 1s; after 100ms) {
  Loading...
} @placeholder (minimum 500) {
  Placeholder content!
} @error {
  Loading failed :(
}

================================================================================
`;

exports[`complex-for.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@for (item of items.foo.bar; track item.id) {
    <h1>{{ item }}</h1>
}
@empty {
    There were no items in the list.
}

=====================================output=====================================
@for (item of items.foo.bar; track item.id) {
  <h1>{{ item }}</h1>
} @empty {
  There were no items in the list.
}

================================================================================
`;

exports[`complex-for.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@for (item of items.foo.bar; track item.id) {
    <h1>{{ item }}</h1>
}
@empty {
    There were no items in the list.
}

=====================================output=====================================
@for (item of items.foo.bar; track item.id) {
  <h1>{{ item }}</h1>
} @empty {
  There were no items in the list.
}

================================================================================
`;

exports[`complex-if.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (cond.expr; as foo) {
    Main case was true!
}
@else if (other.expr) {
    Extra case was true!
}
@else {
    False case!
}

=====================================output=====================================
@if (cond.expr; as foo) {
  Main case was true!
} @else if (other.expr) {
  Extra case was true!
} @else {
  False case!
}

================================================================================
`;

exports[`complex-if.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (cond.expr; as foo) {
    Main case was true!
}
@else if (other.expr) {
    Extra case was true!
}
@else {
    False case!
}

=====================================output=====================================
@if (cond.expr; as foo) {
  Main case was true!
} @else if (other.expr) {
  Extra case was true!
} @else {
  False case!
}

================================================================================
`;

exports[`complex-switch.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@switch (cond.kind) {
@case (x()) {
    X case
}
@case ('hello') {
    Y case
}
@case (42) {
    Z case
}
@default {
    No case matched
}
}

=====================================output=====================================
@switch (cond.kind) {
  @case (x()) {
    X case
  }
  @case ("hello") {
    Y case
  }
  @case (42) {
    Z case
  }
  @default {
    No case matched
  }
}

================================================================================
`;

exports[`complex-switch.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@switch (cond.kind) {
@case (x()) {
    X case
}
@case ('hello') {
    Y case
}
@case (42) {
    Z case
}
@default {
    No case matched
}
}

=====================================output=====================================
@switch (cond.kind) {
  @case (x()) {
    X case
  }
  @case ("hello") {
    Y case
  }
  @case (42) {
    Z case
  }
  @default {
    No case matched
  }
}

================================================================================
`;

exports[`deferred.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@defer (when isLoaded) {
    <p>Main content</p>
  }     @loading {
    <p>Loading...</p>
  }     @placeholder {
    <p>pending</p>
} @error    {
             <p>Failed to load</p>
  }

=====================================output=====================================
@defer (when isLoaded) {
  <p>Main content</p>
} @loading {
  <p>Loading...</p>
} @placeholder {
  <p>pending</p>
} @error {
  <p>Failed to load</p>
}

================================================================================
`;

exports[`deferred.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@defer (when isLoaded) {
    <p>Main content</p>
  }     @loading {
    <p>Loading...</p>
  }     @placeholder {
    <p>pending</p>
} @error    {
             <p>Failed to load</p>
  }

=====================================output=====================================
@defer (when isLoaded) {
  <p>Main content</p>
} @loading {
  <p>Loading...</p>
} @placeholder {
  <p>pending</p>
} @error {
  <p>Failed to load</p>
}

================================================================================
`;

exports[`for.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@for (item of items; track item) {
  <p>{{item.name}}</p>
} @empty {
  <p>No Items</p>
}

=====================================output=====================================
@for (item of items; track item) {
  <p>{{ item.name }}</p>
} @empty {
  <p>No Items</p>
}

================================================================================
`;

exports[`for.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@for (item of items; track item) {
  <p>{{item.name}}</p>
} @empty {
  <p>No Items</p>
}

=====================================output=====================================
@for (item of items; track item) {
  <p>{{ item.name }}</p>
} @empty {
  <p>No Items</p>
}

================================================================================
`;

exports[`if.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (user.isHuman) {
    <human-profile [data]="user" />
} @else     if    (user.isRobot)    {   <robot-profile [data]="user" />
} @else   {
  <p>The profile is unknown!</p>
}

=====================================output=====================================
@if (user.isHuman) {
  <human-profile [data]="user" />
} @else if (user.isRobot) {
  <robot-profile [data]="user" />
} @else {
  <p>The profile is unknown!</p>
}

================================================================================
`;

exports[`if.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (user.isHuman) {
    <human-profile [data]="user" />
} @else     if    (user.isRobot)    {   <robot-profile [data]="user" />
} @else   {
  <p>The profile is unknown!</p>
}

=====================================output=====================================
@if (user.isHuman) {
  <human-profile [data]="user" />
} @else if (user.isRobot) {
  <robot-profile [data]="user" />
} @else {
  <p>The profile is unknown!</p>
}

================================================================================
`;

exports[`if-else-nested.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (1) {
  <p>foo</p>
} @else if (2) {
  @if (3) {
    <p>bar</p>
  } @else if (4){
    <p>baz</p>
  }
}

=====================================output=====================================
@if (1) {
  <p>foo</p>
} @else if (2) {
  @if (3) {
    <p>bar</p>
  } @else if (4) {
    <p>baz</p>
  }
}

================================================================================
`;

exports[`if-else-nested.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (1) {
  <p>foo</p>
} @else if (2) {
  @if (3) {
    <p>bar</p>
  } @else if (4){
    <p>baz</p>
  }
}

=====================================output=====================================
@if (1) {
  <p>foo</p>
} @else if (2) {
  @if (3) {
    <p>bar</p>
  } @else if (4) {
    <p>baz</p>
  }
}

================================================================================
`;

exports[`invalid-defer-block-multiple-error-blocks.html - {"bracketSameLine":false} [angular] format 1`] = `"@defer block can only have one @error block (4:3)"`;

exports[`invalid-defer-block-multiple-error-blocks.html - {"bracketSameLine":true} [angular] format 1`] = `"@defer block can only have one @error block (4:3)"`;

exports[`invalid-defer-block-multiple-loading-blocks.html - {"bracketSameLine":false} [angular] format 1`] = `"@defer block can only have one @loading block (4:3)"`;

exports[`invalid-defer-block-multiple-loading-blocks.html - {"bracketSameLine":true} [angular] format 1`] = `"@defer block can only have one @loading block (4:3)"`;

exports[`invalid-defer-block-multiple-placeholder-blocks.html - {"bracketSameLine":false} [angular] format 1`] = `"@defer block can only have one @placeholder block (4:3)"`;

exports[`invalid-defer-block-multiple-placeholder-blocks.html - {"bracketSameLine":true} [angular] format 1`] = `"@defer block can only have one @placeholder block (4:3)"`;

exports[`invalid-for-block-empty-with-param.html - {"bracketSameLine":false} [angular] format 1`] = `"@empty block cannot have parameters (2:3)"`;

exports[`invalid-for-block-empty-with-param.html - {"bracketSameLine":true} [angular] format 1`] = `"@empty block cannot have parameters (2:3)"`;

exports[`invalid-for-block-multiple-empty-blocks.html - {"bracketSameLine":false} [angular] format 1`] = `"@for loop can only have one @empty block (4:3)"`;

exports[`invalid-for-block-multiple-empty-blocks.html - {"bracketSameLine":true} [angular] format 1`] = `"@for loop can only have one @empty block (4:3)"`;

exports[`no-space-blocks.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (cond.expr; as foo){Main case was true!}@else if (other.expr) {Extra case was true!}@else {False case!}

=====================================output=====================================
@if (cond.expr; as foo) {
  Main case was true!
} @else if (other.expr) {
  Extra case was true!
} @else {
  False case!
}

================================================================================
`;

exports[`no-space-blocks.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@if (cond.expr; as foo){Main case was true!}@else if (other.expr) {Extra case was true!}@else {False case!}

=====================================output=====================================
@if (cond.expr; as foo) {
  Main case was true!
} @else if (other.expr) {
  Extra case was true!
} @else {
  False case!
}

================================================================================
`;

exports[`switch.html - {"bracketSameLine":false} format 1`] = `
====================================options=====================================
bracketSameLine: false
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@switch    (value) {
  @case     (1) {
    <p>One</p>
    }
      @case (2) {
    <p>Two</p>
}
@default {
    <p>Default</p>
     }
}

=====================================output=====================================
@switch (value) {
  @case (1) {
    <p>One</p>
  }
  @case (2) {
    <p>Two</p>
  }
  @default {
    <p>Default</p>
  }
}

================================================================================
`;

exports[`switch.html - {"bracketSameLine":true} format 1`] = `
====================================options=====================================
bracketSameLine: true
parsers: ["angular"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@switch    (value) {
  @case     (1) {
    <p>One</p>
    }
      @case (2) {
    <p>Two</p>
}
@default {
    <p>Default</p>
     }
}

=====================================output=====================================
@switch (value) {
  @case (1) {
    <p>One</p>
  }
  @case (2) {
    <p>Two</p>
  }
  @default {
    <p>Default</p>
  }
}

================================================================================
`;
