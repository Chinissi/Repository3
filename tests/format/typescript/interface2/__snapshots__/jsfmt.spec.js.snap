// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`break.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export interface Environment1 extends GenericEnvironment<
  SomeType,
  AnotherType,
  YetAnotherType,
> {
  m(): void;
};
export class Environment2 extends GenericEnvironment<
  SomeType,
  AnotherType,
  YetAnotherType,
  DifferentType1,
  DifferentType2,
  DifferentType3,
  DifferentType4,
> {
  m() {};
};

// Declare Interface Break
declare interface ExtendsOne extends ASingleInterface {
  x: string;
}

declare interface ExtendsLarge extends ASingleInterfaceWithAReallyReallyReallyReallyLongName {
  x: string;
}

declare interface ExtendsMany extends Interface1, Interface2, Interface3, Interface4, Interface5, Interface6, Interface7 {
  x: string;
}

// Interface declaration break
interface ExtendsOne extends ASingleInterface {
  x: string;
}

interface ExtendsLarge extends ASingleInterfaceWithAReallyReallyReallyReallyLongName {
  x: string;
}

interface ExtendsMany extends Interface1, Interface2, Interface3, Interface4, Interface5, Interface6, Interface7 {
  s: string;
}

// Generic Types
interface ExtendsOne extends ASingleInterface<string> {
  x: string;
}

interface ExtendsLarge extends ASingleInterfaceWithAReallyReallyReallyReallyLongName<string> {
  x: string;
}

interface ExtendsMany
  extends ASingleGenericInterface<Interface1, Interface2, Interface3, Interface4, Interface5, Interface6, Interface7> {
  x: string;
}

interface ExtendsManyWithGenerics
  extends InterfaceOne, InterfaceTwo, ASingleGenericInterface<Interface1, Interface2, Interface3, Interface4, Interface5, Interface6, Interface7>, InterfaceThree {

    x: string;
  }

export interface ExtendsLongOneWithGenerics extends Bar< SomeLongTypeSomeLongTypeSomeLongTypeSomeLongType,  ToBreakLineToBreakLineToBreakLine> {}

=====================================output=====================================
export interface Environment1
  extends GenericEnvironment<SomeType, AnotherType, YetAnotherType> {
  m(): void;
}
export class Environment2 extends GenericEnvironment<
  SomeType,
  AnotherType,
  YetAnotherType,
  DifferentType1,
  DifferentType2,
  DifferentType3,
  DifferentType4
> {
  m() {}
}

// Declare Interface Break
declare interface ExtendsOne extends ASingleInterface {
  x: string;
}

declare interface ExtendsLarge
  extends ASingleInterfaceWithAReallyReallyReallyReallyLongName {
  x: string;
}

declare interface ExtendsMany
  extends Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6,
    Interface7 {
  x: string;
}

// Interface declaration break
interface ExtendsOne extends ASingleInterface {
  x: string;
}

interface ExtendsLarge
  extends ASingleInterfaceWithAReallyReallyReallyReallyLongName {
  x: string;
}

interface ExtendsMany
  extends Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6,
    Interface7 {
  s: string;
}

// Generic Types
interface ExtendsOne extends ASingleInterface<string> {
  x: string;
}

interface ExtendsLarge
  extends ASingleInterfaceWithAReallyReallyReallyReallyLongName<string> {
  x: string;
}

interface ExtendsMany
  extends ASingleGenericInterface<
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6,
    Interface7
  > {
  x: string;
}

interface ExtendsManyWithGenerics
  extends InterfaceOne,
    InterfaceTwo,
    ASingleGenericInterface<
      Interface1,
      Interface2,
      Interface3,
      Interface4,
      Interface5,
      Interface6,
      Interface7
    >,
    InterfaceThree {
  x: string;
}

export interface ExtendsLongOneWithGenerics
  extends Bar<
    SomeLongTypeSomeLongTypeSomeLongTypeSomeLongType,
    ToBreakLineToBreakLineToBreakLine
  > {}

================================================================================
`;

exports[`comments.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
interface A1  // comment
{  foo(): bar;}

interface A2  // comment
extends Base
{  foo(): bar;}

interface A3  // comment1
extends Base  // comment2
{  foo(): bar;}

interface A4  // comment1
extends Base  // comment2
              // comment3
{  foo(): bar;}

interface A5  // comment1
extends Base  // comment2
              // comment3
{             // comment4
foo(): bar;}

interface A6  // comment1
extends Base  // comment2
              // comment3
{
// comment4
foo(): bar;}

=====================================output=====================================
interface A1 {
  // comment
  foo(): bar;
}

interface A2 // comment
  extends Base {
  foo(): bar;
}

interface A3 // comment1
  extends Base {
  // comment2
  foo(): bar;
}

interface A4 // comment1
  extends Base {
  // comment2
  // comment3
  foo(): bar;
}

interface A5 // comment1
  extends Base {
  // comment2
  // comment3
  // comment4
  foo(): bar;
}

interface A6 // comment1
  extends Base {
  // comment2
  // comment3
  // comment4
  foo(): bar;
}

================================================================================
`;

exports[`comments-declare.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
declare interface a // 1
  extends b  // 2
{  foo: boolean}

=====================================output=====================================
declare interface a // 1
  extends b {
  // 2
  foo: boolean;
}

================================================================================
`;

exports[`long-type-parameters.ts [__babel_estree] format 1`] = `
"Unexpected token, expected \\",\\" (3:5)
  1 | // https://github.com/vega/vega-lite/blob/ae13aff7b480cf9c994031eca08a6b1720e01ab3/src/mark.ts#L602
  2 | export interface MarkDef<
> 3 |   M extends string | Mark = Mark,
    |     ^
  4 |   ES extends ExprRef | SignalRef = ExprRef | SignalRef
  5 | > extends GenericMarkDef<M>,
  6 |     Omit<"
`;

exports[`long-type-parameters.ts [babel] format 1`] = `
"Unexpected token, expected \\",\\" (3:5)
  1 | // https://github.com/vega/vega-lite/blob/ae13aff7b480cf9c994031eca08a6b1720e01ab3/src/mark.ts#L602
  2 | export interface MarkDef<
> 3 |   M extends string | Mark = Mark,
    |     ^
  4 |   ES extends ExprRef | SignalRef = ExprRef | SignalRef
  5 | > extends GenericMarkDef<M>,
  6 |     Omit<"
`;

exports[`long-type-parameters.ts [flow] format 1`] = `
"Unexpected token \`extends\`, expected the token \`,\` (3:5)
  1 | // https://github.com/vega/vega-lite/blob/ae13aff7b480cf9c994031eca08a6b1720e01ab3/src/mark.ts#L602
  2 | export interface MarkDef<
> 3 |   M extends string | Mark = Mark,
    |     ^^^^^^^
  4 |   ES extends ExprRef | SignalRef = ExprRef | SignalRef
  5 | > extends GenericMarkDef<M>,
  6 |     Omit<"
`;

exports[`long-type-parameters.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// https://github.com/vega/vega-lite/blob/ae13aff7b480cf9c994031eca08a6b1720e01ab3/src/mark.ts#L602
export interface MarkDef<
  M extends string | Mark = Mark,
  ES extends ExprRef | SignalRef = ExprRef | SignalRef
> extends GenericMarkDef<M>,
    Omit<
      MarkConfig<ES> &
        AreaConfig<ES> &
        BarConfig<ES> & // always extends RectConfig
        LineConfig<ES> &
        TickConfig<ES>,
      'startAngle' | 'endAngle' | 'width' | 'height'
    >,
    MarkDefMixins<ES> {}

=====================================output=====================================
// https://github.com/vega/vega-lite/blob/ae13aff7b480cf9c994031eca08a6b1720e01ab3/src/mark.ts#L602
export interface MarkDef<
  M extends string | Mark = Mark,
  ES extends ExprRef | SignalRef = ExprRef | SignalRef
> extends GenericMarkDef<M>,
    Omit<
      MarkConfig<ES> &
        AreaConfig<ES> &
        BarConfig<ES> & // always extends RectConfig
        LineConfig<ES> &
        TickConfig<ES>,
      "startAngle" | "endAngle" | "width" | "height"
    >,
    MarkDefMixins<ES> {}

================================================================================
`;

exports[`module.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
declare module X {
  declare interface Y { x: number; }
}

=====================================output=====================================
declare module X {
  declare interface Y {
    x: number;
  }
}

================================================================================
`;
