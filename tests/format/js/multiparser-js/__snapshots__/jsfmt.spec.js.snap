// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`js.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const working = /* JS */ \`
const bar = 'bar';
console.log(   bar    );
\`;

const notWorking = /* JS */ \`
const bar = \${JSON.stringify(working)};
console.log(   bar    );
\`;

const template = /* JS */ \`
  const myValue = \\\`1234\\\`;
  const interpolated = \\\`\\\${myValue}\\\`;
  const escaped = \\\`\\\\\\\${myValue}\\\`;
\`;

const nested = /* JS */ \`
  const nested = /* JS */ \\\`
    const nested = /* JS */ \\\\\\\`
      console.log('hello');
    \\\\\\\`;
  \\\`;
\`;

=====================================output=====================================
const working = /* JS */ \`
const bar = "bar";
console.log(bar);
\`;

const notWorking = /* JS */ \`
const bar = \${JSON.stringify(working)};
console.log(   bar    );
\`;

const template = /* JS */ \`
  const myValue = \\\`1234\\\`;
  const interpolated = \\\`\\\${myValue}\\\`;
  const escaped = \\\`\\\\\\\${myValue}\\\`;
\`;

const nested = /* JS */ \`
  const nested = /* JS */ \\\`
    const nested = /* JS */ \\\\\\\`console.log("hello");\\\\\\\`;
  \\\`;
\`;

================================================================================
`;

exports[`jsx.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<script>{\`
const bar = 'bar';
console.log(   bar    );
\`}</script>;

<script>{\`
const bar = 'bar';
\${"not formatted"}
console.log(   bar    );
\`}</script>;

<script>{\`
const bar = 'bar';
console.log(   bar    );
\`}{\`not.formatted();\`}</script>;

<script>{\`
  const bar = 'bar';
console.log(   bar    );
\`}</script>;

<script type="module">{\`
  const bar = 'bar';
console.log(   bar    );
\`}</script>;

<script type="text/javascript">{\`
  const bar = 'bar';
console.log(   bar    );
\`}</script>;

=====================================output=====================================
<script>{\`
const bar = "bar";
console.log(bar);
\`}</script>;

<script>{\`
const bar = 'bar';
\${"not formatted"}
console.log(   bar    );
\`}</script>;

<script>
  {\`
const bar = 'bar';
console.log(   bar    );
\`}
  {\`not.formatted();\`}
</script>;

<script>{\`
  const bar = "bar";
  console.log(bar);
\`}</script>;

<script type="module">{\`
  const bar = "bar";
  console.log(bar);
\`}</script>;

<script type="text/javascript">{\`
  const bar = "bar";
  console.log(bar);
\`}</script>;

================================================================================
`;

exports[`typescript.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<script type="application/x-typescript">{\`
const bar: number = 'bar';
console.log(   bar    );
\`}</script>;

<script type="application/x-typescript">{\`
const bar: number = 'bar';
\${"not formatted"}
console.log(   bar    );
\`}</script>;

<script lang="ts">{\`
  const bar: number = 'bar';
console.log(   bar    );
\`}</script>;

=====================================output=====================================
<script type="application/x-typescript">{\`
const bar: number = "bar";
console.log(bar);
\`}</script>;

<script type="application/x-typescript">{\`
const bar: number = 'bar';
\${"not formatted"}
console.log(   bar    );
\`}</script>;

<script lang="ts">{\`
  const bar: number = "bar";
  console.log(bar);
\`}</script>;

================================================================================
`;
