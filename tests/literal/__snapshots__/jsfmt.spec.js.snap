exports[`test number.js 1`] = `
"// parentheses around numeric literal should be preserved
function test5(): string {
  return (100).toString();
}

0
1

0.1
1.1

.1
1.

0b1
0B1
0o1
0O1
0x1
0X1

0x123abcdef456ABCDEF
0X123abcdef456ABCDEF
0xdeadbeef;

0b111000
0b000111
0B111000
0B000111
0o111000
0o000111
0O111000
0O000111
0x111000
0x000111
0X111000
0X000111

1e1
1e+1
1e-1
1.e1
.1e1
1.1e1
1.1e0010
.1e+0010
.1e-0010

1E1
1E+1
1E-1
1.E1
.1E1
1.1E1
1.1E0010
.1E+0010
.1E-0010
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// parentheses around numeric literal should be preserved
function test5(): string {
  return (100).toString();
}

0;
1;

0.1;
1.1;

0.1;
1;

0b1;
0b1;
0o1;
0o1;
0x1;
0x1;

0x123abcdef456abcdef;
0x123abcdef456abcdef;
0xdeadbeef;

0b111000;
0b000111;
0b111000;
0b000111;
0o111000;
0o000111;
0o111000;
0o000111;
0x111000;
0x000111;
0x111000;
0x000111;

1e1;
1e1;
1e-1;
1e1;
0.1e1;
1.1e1;
1.1e10;
0.1e10;
0.1e-10;

1e1;
1e1;
1e-1;
1e1;
0.1e1;
1.1e1;
1.1e10;
0.1e10;
0.1e-10;
"
`;

exports[`test regex.js 1`] = `
"// Normalization of \\x and \\u escapes:

// Basic case.
/a\\xAaAb\\uB1cDE/gim;

// ES2015 unicode escapes.
/\\u{1Fa3}/u;
/\\u{00000000A0}/u;

// Leaves what looks like a ES2015 unicode escape alone if not using the /u flag.
/\\u{1Fa3}/;

// Leaves what looks like escapes but aren\'t alone.
/\\xA\\u00BG/;

// Leaves other escapes alone.
/\\B\\S/;

// Handles escaped backslashes.
/\\\\xAB\\\\\\xAB\\\\\\\\xAB\\B\\\\\\B\\uAbCd/;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Normalization of \\x and \\u escapes:

// Basic case.
/a\\xaaAb\\ub1cdE/gim;

// ES2015 unicode escapes.
/\\u{1fa3}/u;
/\\u{00000000a0}/u;

// Leaves what looks like a ES2015 unicode escape alone if not using the /u flag.
/\\u{1Fa3}/;

// Leaves what looks like escapes but aren\'t alone.
/\\xA\\u00BG/;

// Leaves other escapes alone.
/\\B\\S/;

// Handles escaped backslashes.
/\\\\xAB\\\\\\xab\\\\\\\\xAB\\B\\\\\\B\\uabcd/;
"
`;
