exports[`test arrow.js 1`] = `
"export default function searchUsers(action$) {
  return action$.ofType(ActionTypes.SEARCHED_USERS)
    .map(action => action.payload.query)
    .filter(q => !!q)
    .switchMap(q =>
      Observable.timer(800) // debounce
        .takeUntil(action$.ofType(ActionTypes.CLEARED_SEARCH_RESULTS))
        .mergeMap(() => Observable.merge(
          Observable.of(replace(\`?q=\${q}\`)),
          ajax.getJSON(\`https://api.github.com/search/users?q=\${q}\`)
            .map(res => res.items)
            .map(receiveUsers)
        ))
    );
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export default function searchUsers(action$) {
  return action$
    .ofType(ActionTypes.SEARCHED_USERS)
    .map(action => action.payload.query)
    .filter(q => !!q)
    .switchMap(q =>
      Observable.timer(800)
        .takeUntil(action$.ofType(ActionTypes.CLEARED_SEARCH_RESULTS))
        .mergeMap(() =>
          Observable.merge(
            Observable.of(replace(\`?q=\${q}\`)),
            ajax
              .getJSON(\`https://api.github.com/search/users?q=\${q}\`)
              .map(res => res.items)
              .map(receiveUsers)
          )));
}
"
`;

exports[`test jsx.js 1`] = `
"const els = items.map(item => (
  <div className=\"whatever\">
    <span>{children}</span>
  </div>
));
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const els = items.map(item => (
  <div className=\"whatever\">
    <span>{children}</span>
  </div>
));
"
`;

exports[`test object.js 1`] = `
"const formatData = pipe(
  zip,
  map(([ ref, data ]) => ({
    nodeId: ref.nodeId.toString(),
    ...attributeFromDataValue(ref.attributeId, data)
  })),
  groupBy(prop(\'nodeId\')),
  map(mergeAll),
  values
);

export const setProp = y => ({
  ...y,
  a: \'very, very, very long very, very long text\'
});

export const log = y => {
  console.log(\'very, very, very long very, very long text\')
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const formatData = pipe(
  zip,
  map(([ref, data]) => ({
    nodeId: ref.nodeId.toString(),
    ...attributeFromDataValue(ref.attributeId, data)
  })),
  groupBy(prop(\"nodeId\")),
  map(mergeAll),
  values
);

export const setProp = y => ({
  ...y,
  a: \"very, very, very long very, very long text\"
});

export const log = y => {
  console.log(\"very, very, very long very, very long text\");
};
"
`;
