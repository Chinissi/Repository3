// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class.js 1`] = `
@foo('bar')
class Foo {}

@abc
class Foo {}

var foo = @dec class Bar {
  @baz
  bam() {
    f();
  }
}

@outer({
  store: @inner class Foo {}
})
class Bar {
  
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@foo("bar")
class Foo {}

@abc
class Foo {}

var foo = @dec
class Bar {
  @baz
  bam() {
    f();
  }
};

@outer({
  store: @inner class Foo {}
})
class Bar {}

`;

exports[`comments.js 1`] = `
var x = 100

@Hello({
  a: 'a', // Comment is in the wrong place
  // test
  b: '2'
})
class X {

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
var x = 100;

@Hello({
  a: "a", // Comment is in the wrong place
  // test
  b: "2"
})
class X {}

`;

exports[`export.js 1`] = `
export default
@bar class Foo { }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export default @bar class Foo {};

`;

exports[`methods.js 1`] = `

class Yo {
  @foo("hello")
  async plop() {}

  @anotherDecoratorWithALongName("and a very long string as a first argument")
  async plip() {}
}

class Bar{
  @outer(
    @classDec class { 
      @inner 
      innerMethod() {} 
    }
  )
  outerMethod() {}
}

class Foo {
  @dec
  static bar() {}
}

class A {
  @a.b.c.d(e, f)
  m(){}
}

class A {
  @dec
  ['name'](){}
}

class A {
  @dec *m(){}
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Yo {
  @foo("hello")
  async plop() {}

  @anotherDecoratorWithALongName("and a very long string as a first argument")
  async plip() {}
}

class Bar {
  @outer(
    @classDec
    class {
      @inner
      innerMethod() {}
    }
  )
  outerMethod() {}
}

class Foo {
  @dec
  static bar() {}
}

class A {
  @a.b.c.d(e, f)
  m() {}
}

class A {
  @dec
  ["name"]() {}
}

class A {
  @dec
  *m() {}
}

`;
