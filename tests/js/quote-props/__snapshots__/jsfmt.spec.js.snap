// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`classes.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = "a";
}

class B {
  b = "b";
}

class C {
  c1 = "c1";
  c2 = "c2";
}

class D {
  d1 = "d1";
  "d-2" = "d2";
}

================================================================================
`;

exports[`classes.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = 'a';
}

class B {
  b = 'b';
}

class C {
  c1 = 'c1';
  c2 = 'c2';
}

class D {
  'd1' = 'd1';
  'd-2' = 'd2';
}

================================================================================
`;

exports[`classes.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = "a";
}

class B {
  b = "b";
}

class C {
  c1 = "c1";
  c2 = "c2";
}

class D {
  "d1" = "d1";
  "d-2" = "d2";
}

================================================================================
`;

exports[`classes.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = "a";
}

class B {
  "b" = "b";
}

class C {
  c1 = "c1";
  "c2" = "c2";
}

class D {
  d1 = "d1";
  "d-2" = "d2";
}

================================================================================
`;

exports[`objects.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  '\\u0062': "b",
  '\\u0031': "1"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

const e = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
}

const f = {
  "1": null,
  "1E2": null,
  "1e+3": null,
  "1e+100": null,
  "0b10": null,
  "0o10": null,
  "0xf": null,
  "2n": null,
  "NaN": null,
}

const g = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  NaN: null,
  2n: null,
  'a-a': null,
}

const h = {
  "-1": null,
  "-0xa": null,
}

Object.keys({'g-':4,0xb_b:88,0xb_b_bn:333,
  0xan:3,
  0b100000000000_000000000000000011n:4})

=====================================output=====================================
const a = {
  a: "a",
};

const b = {
  b: "b",
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  "\\u0062": "b",
  "\\u0031": "1",
};

const c = {
  c1: "c1",
  c2: "c2",
};

const d = {
  d1: "d1",
  "d-2": "d2",
};

const e = {
  1: null,
  1e2: null,
  1e3: null,
  1e100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
};

const f = {
  1: null,
  "1E2": null,
  "1e+3": null,
  1e100: null,
  "0b10": null,
  "0o10": null,
  "0xf": null,
  "2n": null,
  NaN: null,
};

const g = {
  1: null,
  1e2: null,
  1e3: null,
  1e100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  NaN: null,
  2n: null,
  "a-a": null,
};

const h = {
  "-1": null,
  "-0xa": null,
};

Object.keys({
  "g-": 4,
  0xb_b: 88,
  0xb_b_bn: 333,
  0xan: 3,
  0b100000000000_000000000000000011n: 4,
});

================================================================================
`;

exports[`objects.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  '\\u0062': "b",
  '\\u0031': "1"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

const e = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
}

const f = {
  "1": null,
  "1E2": null,
  "1e+3": null,
  "1e+100": null,
  "0b10": null,
  "0o10": null,
  "0xf": null,
  "2n": null,
  "NaN": null,
}

const g = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  NaN: null,
  2n: null,
  'a-a': null,
}

const h = {
  "-1": null,
  "-0xa": null,
}

Object.keys({'g-':4,0xb_b:88,0xb_b_bn:333,
  0xan:3,
  0b100000000000_000000000000000011n:4})

=====================================output=====================================
const a = {
  a: 'a',
};

const b = {
  b: 'b',
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  '\\u0062': 'b',
  '\\u0031': '1',
};

const c = {
  c1: 'c1',
  c2: 'c2',
};

const d = {
  'd1': 'd1',
  'd-2': 'd2',
};

const e = {
  1: null,
  1e2: null,
  1e3: null,
  1e100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
};

const f = {
  '1': null,
  '1E2': null,
  '1e+3': null,
  '1e+100': null,
  '0b10': null,
  '0o10': null,
  '0xf': null,
  '2n': null,
  'NaN': null,
};

const g = {
  '1': null,
  '100': null,
  '1000': null,
  '1e+100': null,
  '2': null,
  '8': null,
  '15': null,
  'NaN': null,
  '2': null,
  'a-a': null,
};

const h = {
  '-1': null,
  '-0xa': null,
};

Object.keys({ 'g-': 4, '187': 88, '3003': 333, '10': 3, '536870915': 4 });

================================================================================
`;

exports[`objects.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  '\\u0062': "b",
  '\\u0031': "1"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

const e = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
}

const f = {
  "1": null,
  "1E2": null,
  "1e+3": null,
  "1e+100": null,
  "0b10": null,
  "0o10": null,
  "0xf": null,
  "2n": null,
  "NaN": null,
}

const g = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  NaN: null,
  2n: null,
  'a-a': null,
}

const h = {
  "-1": null,
  "-0xa": null,
}

Object.keys({'g-':4,0xb_b:88,0xb_b_bn:333,
  0xan:3,
  0b100000000000_000000000000000011n:4})

=====================================output=====================================
const a = {
  a: "a",
};

const b = {
  b: "b",
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  "\\u0062": "b",
  "\\u0031": "1",
};

const c = {
  c1: "c1",
  c2: "c2",
};

const d = {
  "d1": "d1",
  "d-2": "d2",
};

const e = {
  1: null,
  1e2: null,
  1e3: null,
  1e100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
};

const f = {
  "1": null,
  "1E2": null,
  "1e+3": null,
  "1e+100": null,
  "0b10": null,
  "0o10": null,
  "0xf": null,
  "2n": null,
  "NaN": null,
};

const g = {
  "1": null,
  "100": null,
  "1000": null,
  "1e+100": null,
  "2": null,
  "8": null,
  "15": null,
  "NaN": null,
  "2": null,
  "a-a": null,
};

const h = {
  "-1": null,
  "-0xa": null,
};

Object.keys({ "g-": 4, "187": 88, "3003": 333, "10": 3, "536870915": 4 });

================================================================================
`;

exports[`objects.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  '\\u0062': "b",
  '\\u0031': "1"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

const e = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
}

const f = {
  "1": null,
  "1E2": null,
  "1e+3": null,
  "1e+100": null,
  "0b10": null,
  "0o10": null,
  "0xf": null,
  "2n": null,
  "NaN": null,
}

const g = {
  1: null,
  1E2: null,
  1e+3: null,
  1e+100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  NaN: null,
  2n: null,
  'a-a': null,
}

const h = {
  "-1": null,
  "-0xa": null,
}

Object.keys({'g-':4,0xb_b:88,0xb_b_bn:333,
  0xan:3,
  0b100000000000_000000000000000011n:4})

=====================================output=====================================
const a = {
  a: "a",
};

const b = {
  "b": "b",
};

const b2 = {
  // Escapes should stay as escapes and not be unquoted.
  "\\u0062": "b",
  "\\u0031": "1",
};

const c = {
  c1: "c1",
  "c2": "c2",
};

const d = {
  d1: "d1",
  "d-2": "d2",
};

const e = {
  1: null,
  1e2: null,
  1e3: null,
  1e100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  2n: null,
  NaN: null,
};

const f = {
  "1": null,
  "1E2": null,
  "1e+3": null,
  "1e+100": null,
  "0b10": null,
  "0o10": null,
  "0xf": null,
  "2n": null,
  "NaN": null,
};

const g = {
  1: null,
  1e2: null,
  1e3: null,
  1e100: null,
  0b10: null,
  0o10: null,
  0xf: null,
  NaN: null,
  2n: null,
  "a-a": null,
};

const h = {
  "-1": null,
  "-0xa": null,
};

Object.keys({
  "g-": 4,
  0xb_b: 88,
  0xb_b_bn: 333,
  0xan: 3,
  0b100000000000_000000000000000011n: 4,
});

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: "",
  [foo.bar]: "",
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: '',
  [foo.bar]: '',
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: "",
  [foo.bar]: "",
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: "",
  [foo.bar]: "",
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: "",
  1: "",
};

obj = {
  bar: "",
  1: "",
};

obj = {
  "foo-bar": "",
  1: "",
};

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: '',
  1: '',
};

obj = {
  bar: '',
  1: '',
};

obj = {
  'foo-bar': '',
  '1': '',
};

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: "",
  1: "",
};

obj = {
  bar: "",
  1: "",
};

obj = {
  "foo-bar": "",
  "1": "",
};

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: "",
  1: "",
};

obj = {
  "bar": "",
  1: "",
};

obj = {
  "foo-bar": "",
  1: "",
};

================================================================================
`;
