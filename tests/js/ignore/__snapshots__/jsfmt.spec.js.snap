// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ignore.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function a() {
  // prettier-ignore
  var fnString =
    '"' + this.USE + ' ' + this.STRICT + '";\\n' +
    this.filterPrefix() +
    'var fn=' + this.generateFunction('fn', 's,l,a,i') +
    extra +
    this.watchFns() +
    'return fn;';

  // prettier-ignore
  const identity = Matrix.create(
    1, 0, 0,
    0, 1, 0,
    0, 0, 0
  );

  // Let's make sure that this comment doesn't interfere

  // prettier-ignore
  const commentsWithPrettierIgnore =   {
    "ewww":
            "gross-formatting",
  };

  function giveMeSome() {
    a(  a  ); // prettier-ignore
    // shouldn't I return something?  :shrug:
  }

  // prettier-ignore
  console.error(
    'In order to use ' + prompt + ', you need to configure a ' +
    'few environment variables to be able to commit to the ' +
    'repository. Follow those steps to get you setup:\\n' +
    '\\n' +
    'Go to https://github.com/settings/tokens/new\\n' +
    ' - Fill "Token description" with "' + prompt + ' for ' +
      repoSlug + '"\\n' +
    ' - Check "public_repo"\\n' +
    ' - Press "Generate Token"\\n' +
    '\\n' +
    'In a different tab, go to https://travis-ci.org/' +
      repoSlug + '/settings\\n' +
    ' - Make sure "Build only if .travis.yml is present" is ON\\n' +
    ' - Fill "Name" with "GITHUB_USER" and "Value" with the name of the ' +
      'account you generated the token with. Press "Add"\\n' +
    '\\n' +
    'Once this is done, commit anything to the repository to restart ' +
      'Travis and it should work :)'
  );

  // Incorrectly indented on purpose
      function f</* prettier-ignore */ T    :    B>(
        a : Array  <   number   > // prettier-ignore
      ) {

        call(
          f(         1          )
          // prettier-ignore
        )
      }
}

const response = {
  // prettier-ignore
  '_text': 'Turn on the lights',
  intent: 'lights',
};

=====================================output=====================================
function a() {
  // prettier-ignore
  var fnString =
    '"' + this.USE + ' ' + this.STRICT + '";\\n' +
    this.filterPrefix() +
    'var fn=' + this.generateFunction('fn', 's,l,a,i') +
    extra +
    this.watchFns() +
    'return fn;';

  // prettier-ignore
  const identity = Matrix.create(
    1, 0, 0,
    0, 1, 0,
    0, 0, 0
  );

  // Let's make sure that this comment doesn't interfere

  // prettier-ignore
  const commentsWithPrettierIgnore =   {
    "ewww":
            "gross-formatting",
  };

  function giveMeSome() {
    a(  a  ); // prettier-ignore
    // shouldn't I return something?  :shrug:
  }

  // prettier-ignore
  console.error(
    'In order to use ' + prompt + ', you need to configure a ' +
    'few environment variables to be able to commit to the ' +
    'repository. Follow those steps to get you setup:\\n' +
    '\\n' +
    'Go to https://github.com/settings/tokens/new\\n' +
    ' - Fill "Token description" with "' + prompt + ' for ' +
      repoSlug + '"\\n' +
    ' - Check "public_repo"\\n' +
    ' - Press "Generate Token"\\n' +
    '\\n' +
    'In a different tab, go to https://travis-ci.org/' +
      repoSlug + '/settings\\n' +
    ' - Make sure "Build only if .travis.yml is present" is ON\\n' +
    ' - Fill "Name" with "GITHUB_USER" and "Value" with the name of the ' +
      'account you generated the token with. Press "Add"\\n' +
    '\\n' +
    'Once this is done, commit anything to the repository to restart ' +
      'Travis and it should work :)'
  );

  // Incorrectly indented on purpose
  function f</* prettier-ignore */ T    :    B>(
    a : Array  <   number   > // prettier-ignore
  ) {
    call(
      f(         1          )
      // prettier-ignore
    );
  }
}

const response = {
  // prettier-ignore
  '_text': 'Turn on the lights',
  intent: "lights",
};

================================================================================
`;

exports[`ignore-2.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// #8736

function HelloWorld() {
  return (
    <div
      {...{} /*
      // @ts-ignore */ /* prettier-ignore */}
      invalidProp="HelloWorld"
    >
      test
    </div>
  );
}

a = <div {.../* prettier-ignore */b}/>
a = <div {...b/* prettier-ignore */}/>
a = <div {.../* prettier-ignore */{}}/>
a = <div {...{/* prettier-ignore */}}/>
a = <div {...{}/* prettier-ignore */}/>

=====================================output=====================================
// #8736

function HelloWorld() {
  return (
    <div
      {...{} /*
      // @ts-ignore */ /* prettier-ignore */}
      invalidProp="HelloWorld"
    >
      test
    </div>
  );
}

a = <div {.../* prettier-ignore */ b} />;
a = <div {...b /* prettier-ignore */} />;
a = <div {.../* prettier-ignore */ {}} />;
a = <div {...{/* prettier-ignore */}} />;
a = <div {...{} /* prettier-ignore */} />;

================================================================================
`;

exports[`range-ignore.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// prettier-ignore-start
let i_like         = 1;
let my_assignments = 2;
let sorted         = 3;
// prettier-ignore-end
let but_not    = 4;
let after      = 5;
let ignore_end = 6;

/* prettier-ignore-start */
route('my-designs', '/my-designs/', require('./pages/my-designs/my-designs'));
route('order', '/:project/:thank/order/', require('./pages/order/order'));
route('order-success', '/:project/order-success/', require('./pages/order-success/order-success'));
route('page-not-found', '/page-not-found/', require('./pages/page-not-found/page-not-found'));
route('password-forgot', '/password-forgot/', require('./pages/password-forgot/password-forgot'));
route('restore-password', '/restore-password/:token', require('./pages/restore-password/restore-password'));
/* prettier-ignore-end */

let  this_shall_not_be_ignored   =  2;

// prettier-ignore-start
appApplication.post(
  \`\${APIRouteDefinitions.pathForRoute( APIDefinitions.routes.getPendingChangesForThreshold)}\`,
  (req, res) => {
    validateRequest(req, res, APIDefinitions.routes.getPendingChangesForThreshold, req.body);
  }
);
appApplication.post(
  \`\${APIRouteDefinitions.pathForRoute( APIDefinitions.routes.getPendingChangesForThreshold)}\`,
  (req, res) => {
    validateRequest(req, res, APIDefinitions.routes.getPendingChangesForThreshold, req.body);
  }
);
// prettier-ignore-end

=====================================output=====================================
// prettier-ignore-start
let i_like         = 1;
let my_assignments = 2;
let sorted         = 3;
// prettier-ignore-end
let but_not = 4;
let after = 5;
let ignore_end = 6;

/* prettier-ignore-start */
route('my-designs', '/my-designs/', require('./pages/my-designs/my-designs'));
route('order', '/:project/:thank/order/', require('./pages/order/order'));
route('order-success', '/:project/order-success/', require('./pages/order-success/order-success'));
route('page-not-found', '/page-not-found/', require('./pages/page-not-found/page-not-found'));
route('password-forgot', '/password-forgot/', require('./pages/password-forgot/password-forgot'));
route('restore-password', '/restore-password/:token', require('./pages/restore-password/restore-password'));
/* prettier-ignore-end */

let this_shall_not_be_ignored = 2;

// prettier-ignore-start
appApplication.post(
  \`\${APIRouteDefinitions.pathForRoute( APIDefinitions.routes.getPendingChangesForThreshold)}\`,
  (req, res) => {
    validateRequest(req, res, APIDefinitions.routes.getPendingChangesForThreshold, req.body);
  }
);
appApplication.post(
  \`\${APIRouteDefinitions.pathForRoute( APIDefinitions.routes.getPendingChangesForThreshold)}\`,
  (req, res) => {
    validateRequest(req, res, APIDefinitions.routes.getPendingChangesForThreshold, req.body);
  }
);
// prettier-ignore-end

================================================================================
`;
